#!/usr/bin/env python3
"""
An√°lisis de datos del curso basado en archivos SQL.
Identifica informaci√≥n real disponible vs lo que inventa el agente.
"""

import re
import json
from datetime import datetime

# ID del curso que mapea #CURSO_IA_CHATGPT
COURSE_ID = 'a392bf83-4908-4807-89a9-95d0acc807c9'

def analyze_course_from_sql():
    """Analiza la informaci√≥n real del curso desde los archivos SQL."""
    print("üîç AN√ÅLISIS DEL CURSO DESDE BASE DE DATOS")
    print("=" * 60)
    print(f"üéØ Curso ID: {COURSE_ID}")
    print(f"üîó Mapeo: #CURSO_IA_CHATGPT ‚Üí {COURSE_ID}")
    
    # Leer archivo de cursos
    try:
        with open('/home/gael/proyectos/ventas/Bot-ventas-cursos-telegram/database/sql/courses_rows.sql', 'r', encoding='utf-8') as f:
            courses_sql = f.read()
        
        # Buscar el curso espec√≠fico
        course_pattern = rf"INSERT INTO.*?'{COURSE_ID}'.*?VALUES.*?\((.*?)\);"
        match = re.search(course_pattern, courses_sql, re.DOTALL)
        
        if match:
            course_data = match.group(1)
            # Dividir por comas, pero respetando comillas
            values = parse_sql_values(course_data)
            
            course_info = {
                'id': values[0].strip("'"),
                'name': values[1].strip("'"),
                'short_description': values[2].strip("'"),
                'long_description': values[3].strip("'"),
                'total_duration': values[4].strip("'"),
                'price_usd': values[5].strip("'"),
                'currency': values[6].strip("'"),
                'level': values[9].strip("'"),
                'category': values[10].strip("'"),
                'tools_used': values[20].strip("'"),
                'schedule': values[21].strip("'"),
                'prerequisites': values[27].strip("'"),
                'requirements': values[28].strip("'"),
            }
            
            print_course_details(course_info)
            return course_info
        else:
            print("‚ùå No se encontr√≥ el curso en el archivo SQL")
            return None
            
    except Exception as e:
        print(f"‚ùå Error leyendo archivo SQL: {e}")
        return None

def parse_sql_values(values_string):
    """Parsea los valores de un INSERT SQL de manera b√°sica."""
    # Esta es una implementaci√≥n simplificada
    # En un caso real usar√≠as un parser SQL apropiado
    values = []
    current_value = ""
    in_quotes = False
    i = 0
    
    while i < len(values_string):
        char = values_string[i]
        
        if char == "'" and (i == 0 or values_string[i-1] != '\\'):
            in_quotes = not in_quotes
            current_value += char
        elif char == ',' and not in_quotes:
            values.append(current_value.strip())
            current_value = ""
        else:
            current_value += char
        i += 1
    
    if current_value.strip():
        values.append(current_value.strip())
    
    return values

def print_course_details(course_info):
    """Imprime los detalles del curso de manera organizada."""
    print("\nüìö INFORMACI√ìN REAL DEL CURSO")
    print("-" * 50)
    
    print(f"üìñ Nombre: {course_info['name']}")
    print(f"üí∞ Precio: ${course_info['price_usd']} {course_info['currency']}")
    print(f"‚è±Ô∏è Duraci√≥n: {course_info['total_duration']}")
    print(f"üìä Nivel: {course_info['level']}")
    print(f"üè∑Ô∏è Categor√≠a: {course_info['category']}")
    print(f"üóìÔ∏è Horario: {course_info['schedule']}")
    
    print(f"\nüìù Descripci√≥n corta:")
    print(f"   {course_info['short_description']}")
    
    print(f"\nüõ†Ô∏è Herramientas mencionadas:")
    tools = course_info['tools_used'].strip('{}').replace('"', '').split(',')
    for tool in tools:
        print(f"   ‚Ä¢ {tool.strip()}")
    
    print(f"\nüìã Prerrequisitos:")
    prereqs = course_info['prerequisites'].strip('{}').replace('"', '').split(',')
    for prereq in prereqs:
        print(f"   ‚Ä¢ {prereq.strip()}")

def extract_modules_from_description(long_description):
    """Extrae los m√≥dulos reales de la descripci√≥n larga."""
    print("\nüéì M√ìDULOS REALES IDENTIFICADOS")
    print("-" * 50)
    
    # Buscar patrones de m√≥dulos en la descripci√≥n
    module_patterns = [
        r'(\d+)\.\s*([^:]+):([^\.]+)',  # Patr√≥n: "1. Nombre: Descripci√≥n"
        r'(\w+[^:]+):\s*([^\.]+)',      # Patr√≥n: "Nombre: Descripci√≥n"
    ]
    
    modules_found = []
    
    # Dividir por p√°rrafos para mejor an√°lisis
    paragraphs = long_description.split('\n\n')
    
    for paragraph in paragraphs:
        if 'm√≥dulo' in paragraph.lower() or 'module' in paragraph.lower():
            print(f"üìç P√°rrafo con m√≥dulos encontrado:")
            print(f"   {paragraph[:200]}...")
            
            # Buscar l√≠neas que empiecen con n√∫mero o nombre seguido de ":"
            lines = paragraph.split('\n')
            for line in lines:
                if ':' in line and (line.strip()[0].isdigit() or any(word in line.lower() for word in ['chatgpt', 'documento', 'imagen', 'proyecto'])):
                    modules_found.append(line.strip())
    
    if modules_found:
        print(f"\n‚úÖ M√≥dulos identificados ({len(modules_found)}):")
        for i, module in enumerate(modules_found, 1):
            print(f"   {i}. {module}")
    else:
        print("‚ùå No se encontraron m√≥dulos estructurados en la descripci√≥n")
        
        # Buscar menciones de contenido tem√°tico
        content_keywords = ['chatgpt', 'documento', 'imagen', 'proyecto', 'automatizaci√≥n', 'prompt']
        print(f"\nüîç Contenido tem√°tico mencionado:")
        for keyword in content_keywords:
            if keyword.lower() in long_description.lower():
                print(f"   ‚úì {keyword.capitalize()}")
    
    return modules_found

def analyze_bonuses():
    """Analiza los bonos disponibles para el curso."""
    print(f"\nüéÅ BONOS DISPONIBLES PARA EL CURSO")
    print("-" * 50)
    
    try:
        with open('/home/gael/proyectos/ventas/Bot-ventas-cursos-telegram/database/sql/limited_time_bonuses_rows.sql', 'r', encoding='utf-8') as f:
            bonuses_sql = f.read()
        
        # Buscar bonos para nuestro curso
        bonus_pattern = rf"'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'([^']*)',\s*'{COURSE_ID}'"
        matches = re.findall(bonus_pattern, bonuses_sql)
        
        if matches:
            print(f"‚úÖ Se encontraron {len(matches)} bonos:")
            for i, match in enumerate(matches, 1):
                name = match[1]
                description = match[2]
                value = match[4]
                expires = match[5]
                print(f"   {i}. {name}")
                print(f"      üí∞ Valor: ${value}")
                print(f"      üìÖ Expira: {expires}")
                print(f"      üìù {description}")
                print()
        else:
            print("‚ùå No se encontraron bonos para este curso")
            
    except Exception as e:
        print(f"‚ùå Error leyendo bonos: {e}")

def analyze_career_benefits():
    """Analiza c√≥mo el curso puede beneficiar a diferentes carreras."""
    print(f"\nüíº AN√ÅLISIS PARA DIFERENTES CARRERAS")
    print("=" * 60)
    
    # Basado en la informaci√≥n REAL del curso
    real_content = {
        "nombre": "Curso de Inteligencia Artificial para tu d√≠a a d√≠a profesional desde cero (con ChatGPT e im√°genes)",
        "herramientas": ["ChatGPT", "Midjourney", "DALL-E", "Canva"],
        "duracion": "12 horas",
        "precio": "$120 USD",
        "nivel": "Beginner",
        "temas_principales": [
            "ChatGPT como asistente en tareas diarias",
            "Creaci√≥n de documentos profesionales",
            "Generaci√≥n de im√°genes con IA",
            "Proyecto personal integrado"
        ]
    }
    
    careers = {
        "Marketing Digital": {
            "beneficios_reales": [
                "Automatizar creaci√≥n de contenido para redes sociales usando ChatGPT",
                "Generar im√°genes profesionales para campa√±as con DALL-E y Midjourney",
                "Crear copys persuasivos y optimizados para diferentes plataformas",
                "Desarrollar presentaciones de marketing m√°s impactantes"
            ],
            "aplicacion_practica": "El m√≥dulo de generaci√≥n de im√°genes + ChatGPT permite crear campa√±as completas en minutos"
        },
        "Ingenier√≠a en Ciencia de Datos": {
            "beneficios_reales": [
                "Automatizar documentaci√≥n t√©cnica de proyectos usando ChatGPT",
                "Generar visualizaciones y diagramas explicativos con IA",
                "Crear presentaciones de resultados m√°s comprensibles para stakeholders",
                "Optimizar comunicaci√≥n de hallazgos t√©cnicos"
            ],
            "aplicacion_practica": "M√≥dulo de documentos profesionales ayuda a comunicar an√°lisis complejos de manera clara"
        },
        "Administraci√≥n de Empresas": {
            "beneficios_reales": [
                "Automatizar reportes ejecutivos y an√°lisis empresariales",
                "Crear presentaciones profesionales para juntas directivas",
                "Generar contenido para comunicaci√≥n interna y externa",
                "Optimizar procesos de toma de decisiones con asistencia IA"
            ],
            "aplicacion_practica": "Proyecto integrado permite implementar IA en procesos administrativos reales"
        }
    }
    
    for career, analysis in careers.items():
        print(f"\nüéØ {career.upper()}")
        print(f"   üí° Beneficios espec√≠ficos:")
        for benefit in analysis["beneficios_reales"]:
            print(f"     ‚Ä¢ {benefit}")
        print(f"   üîß Aplicaci√≥n pr√°ctica:")
        print(f"     ‚Üí {analysis['aplicacion_practica']}")

def compare_with_agent_response():
    """Compara la informaci√≥n real vs lo que el agente invent√≥."""
    print(f"\nüö® COMPARACI√ìN: REAL vs INVENTADO POR EL AGENTE")
    print("=" * 60)
    
    print("‚ùå LO QUE EL AGENTE INVENT√ì:")
    invented_modules = [
        "La IA como Pilar del Liderazgo Estrat√©gico",
        "Foresight y An√°lisis Predictivo Aumentado por IA", 
        "Optimizaci√≥n de Decisiones y Modelado de Escenarios",
        "Liderazgo Adaptativo y Agilidad Organizacional",
        "√âtica, Gobernanza y Legado del Liderazgo"
    ]
    
    for module in invented_modules:
        print(f"   ‚Ä¢ {module}")
    
    print("\n‚úÖ LO QUE EXISTE REALMENTE:")
    real_modules = [
        "ChatGPT como asistente en tareas diarias",
        "Creaci√≥n de documentos profesionales con ChatGPT",
        "Generaci√≥n de im√°genes con IA (DALL¬∑E)",
        "Proyecto personal integrado"
    ]
    
    for module in real_modules:
        print(f"   ‚Ä¢ {module}")
    
    print(f"\nüîç DIAGN√ìSTICO:")
    print(f"   ‚Ä¢ El agente invent√≥ m√≥dulos de LIDERAZGO que NO existen")
    print(f"   ‚Ä¢ El curso real es de IA PR√ÅCTICA para uso diario")
    print(f"   ‚Ä¢ Nivel: Beginner (no Ejecutivo-Estrat√©gico)")
    print(f"   ‚Ä¢ Enfoque: Herramientas pr√°cticas, no liderazgo empresarial")

def main():
    """Funci√≥n principal del an√°lisis."""
    print("üöÄ AN√ÅLISIS COMPLETO DEL CURSO REAL")
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Analizar informaci√≥n del curso
    course_info = analyze_course_from_sql()
    
    if course_info:
        # 2. Extraer m√≥dulos de la descripci√≥n
        modules = extract_modules_from_description(course_info.get('long_description', ''))
        
        # 3. Analizar bonos
        analyze_bonuses()
        
        # 4. An√°lisis para carreras
        analyze_career_benefits()
        
        # 5. Comparar con lo inventado
        compare_with_agent_response()
        
        print(f"\nüìä CONCLUSIONES")
        print("=" * 60)
        print("‚úÖ El curso S√ç existe en la base de datos")
        print("‚úÖ La informaci√≥n b√°sica es accesible (nombre, precio, duraci√≥n)")
        print("‚ö†Ô∏è Los m√≥dulos espec√≠ficos est√°n en la descripci√≥n, no en tabla separada")
        print("‚ùå El agente invent√≥ m√≥dulos completamente diferentes")
        print("üîß SOLUCI√ìN: El agente debe leer la descripci√≥n larga del curso")
        
    else:
        print("‚ùå No se pudo acceder a la informaci√≥n del curso")
    
    print(f"\nüéâ AN√ÅLISIS COMPLETADO")

if __name__ == "__main__":
    main()