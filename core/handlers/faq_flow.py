"""
Manejadores para el flujo de preguntas frecuentes.
"""

import logging
from typing import Dict, Optional, TypedDict, Union

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from core.utils.error_handlers import handle_telegram_errors

logger = logging.getLogger(__name__)

class FAQCategory(TypedDict):
    title: str
    questions: Dict[str, str]

FAQ_DATA: Dict[str, FAQCategory] = {
    "general": {
        "title": "‚ùì Preguntas Generales",
        "questions": {
            "faq_what": "¬øQu√© son los cursos de IA?",
            "faq_who": "¬øPara qui√©n son estos cursos?",
            "faq_prereq": "¬øNecesito conocimientos previos?"
        }
    },
    "technical": {
        "title": "üíª Preguntas T√©cnicas",
        "questions": {
            "faq_tech_req": "¬øQu√© requisitos t√©cnicos necesito?",
            "faq_software": "¬øQu√© software utilizaremos?",
            "faq_practice": "¬øHabr√° ejercicios pr√°cticos?"
        }
    },
    "logistics": {
        "title": "üìÖ Log√≠stica y Horarios",
        "questions": {
            "faq_schedule": "¬øCu√°l es el horario de clases?",
            "faq_duration": "¬øCu√°nto dura el curso?",
            "faq_cert": "¬øRecibo certificaci√≥n?"
        }
    }
}

@handle_telegram_errors
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Muestra las categor√≠as de preguntas frecuentes.

    Args:
        update: Objeto Update de Telegram
        context: Contexto del bot
    """
    if not update.effective_chat:
        return

    message = """üìö Preguntas Frecuentes

Selecciona una categor√≠a para ver las preguntas:"""

    keyboard = [
        [InlineKeyboardButton(
            FAQ_DATA["general"]["title"],
            callback_data="faq_cat_general"
        )],
        [InlineKeyboardButton(
            FAQ_DATA["technical"]["title"],
            callback_data="faq_cat_technical"
        )],
        [InlineKeyboardButton(
            FAQ_DATA["logistics"]["title"],
            callback_data="faq_cat_logistics"
        )],
        [InlineKeyboardButton("üîô Volver al men√∫", callback_data="menu_main")]
    ]

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@handle_telegram_errors
async def handle_faq_category(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    category: str
) -> None:
    """
    Muestra las preguntas de una categor√≠a espec√≠fica.

    Args:
        update: Objeto Update de Telegram
        context: Contexto del bot
        category: Categor√≠a de preguntas a mostrar
    """
    if not update.effective_chat or not update.callback_query:
        return

    query = update.callback_query
    cat_data = FAQ_DATA.get(category.replace("faq_cat_", ""))

    if not cat_data:
        await query.answer("Categor√≠a no encontrada")
        return

    message = f"{cat_data['title']}\n\nSelecciona una pregunta:"

    keyboard = [
        [InlineKeyboardButton(text, callback_data=callback)]
        for callback, text in cat_data["questions"].items()
    ]
    keyboard.append([
        InlineKeyboardButton("üîô Volver a categor√≠as", callback_data="faq_back")
    ])

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@handle_telegram_errors
async def handle_faq_answer(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    question: str
) -> None:
    """
    Muestra la respuesta a una pregunta espec√≠fica.

    Args:
        update: Objeto Update de Telegram
        context: Contexto del bot
        question: Identificador de la pregunta a responder
    """
    if not update.effective_chat or not update.callback_query:
        return

    query = update.callback_query
    answers = get_faq_answers()
    answer = answers.get(question, "Lo siento, no encontr√© la respuesta a esa pregunta.")

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô Volver a preguntas", callback_data="faq_back")
    ]])

    await query.edit_message_text(
        text=answer,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

def get_faq_answers() -> Dict[str, str]:
    """
    Retorna el diccionario de respuestas a preguntas frecuentes.

    Returns:
        Diccionario con las respuestas a cada pregunta
    """
    return {
        "faq_what": """Los cursos de IA son programas especializados que te ense√±an a:

‚Ä¢ Comprender los fundamentos de la IA
‚Ä¢ Implementar soluciones pr√°cticas
‚Ä¢ Optimizar procesos con tecnolog√≠a
‚Ä¢ Crear aplicaciones inteligentes""",
        "faq_who": """Estos cursos est√°n dise√±ados para:

‚Ä¢ Profesionales que quieren actualizarse
‚Ä¢ Emprendedores buscando innovar
‚Ä¢ Estudiantes interesados en tecnolog√≠a
‚Ä¢ Cualquier persona curiosa por la IA""",
        "faq_prereq": """No necesitas conocimientos previos espec√≠ficos.
Solo necesitas:

‚Ä¢ Computadora con internet
‚Ä¢ Ganas de aprender
‚Ä¢ Dedicaci√≥n al curso""",
        "faq_tech_req": """Requisitos t√©cnicos b√°sicos:

‚Ä¢ Computadora (Windows/Mac/Linux)
‚Ä¢ Conexi√≥n estable a internet
‚Ä¢ Navegador web actualizado
‚Ä¢ 4GB RAM m√≠nimo""",
        "faq_software": """Utilizaremos herramientas accesibles:

‚Ä¢ Plataformas web de IA
‚Ä¢ Editores de c√≥digo online
‚Ä¢ Jupyter Notebooks
‚Ä¢ Google Colab""",
        "faq_practice": """¬°S√≠! El curso es muy pr√°ctico:

‚Ä¢ Ejercicios en cada m√≥dulo
‚Ä¢ Proyectos reales
‚Ä¢ Feedback personalizado
‚Ä¢ Pr√°ctica guiada""",
        "faq_schedule": """Horarios flexibles:

‚Ä¢ Clases en vivo: 2 veces por semana
‚Ä¢ Grabaciones disponibles
‚Ä¢ Horarios adaptables
‚Ä¢ Soporte continuo""",
        "faq_duration": """Duraci√≥n del curso:

‚Ä¢ 12 semanas en total
‚Ä¢ 2 horas por clase
‚Ä¢ Acceso de por vida
‚Ä¢ Ritmo personalizado""",
        "faq_cert": """Certificaci√≥n incluida:

‚Ä¢ Certificado digital
‚Ä¢ Avalado por la instituci√≥n
‚Ä¢ V√°lido internacionalmente
‚Ä¢ Verificable online"""
    } 