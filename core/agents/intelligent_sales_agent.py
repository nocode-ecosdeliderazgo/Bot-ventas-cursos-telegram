"""
Agente de ventas inteligente que usa OpenAI para generar respuestas
completamente personalizadas basadas en el perfil del usuario.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Union, cast
from datetime import datetime
import json

try:
    from openai import AsyncOpenAI
    from openai.types.chat import ChatCompletionMessageParam
except ImportError:
    AsyncOpenAI = None
    ChatCompletionMessageParam = Dict[str, str]  # Tipo para compatibilidad

from core.utils.memory import LeadMemory
from core.services.courseService import CourseService
from core.services.promptService import PromptService

logger = logging.getLogger(__name__)

SYSTEM_PROMPT = """
Eres Brenda, una asesora especializada en cursos de Inteligencia Artificial de "Aprenda y Aplique IA". 
Tu objetivo es ayudar a las personas a descubrir c√≥mo la IA puede transformar su trabajo y vida, de manera c√°lida y natural, como si fueras una amiga genuinamente interesada en su bienestar profesional.

PERSONALIDAD Y TONO:
- Habla con calidez y cercan√≠a, como una amiga que realmente se preocupa
- S√© aut√©ntica y emp√°tica, escucha antes de hablar
- Muestra inter√©s genuino en la persona, no solo en vender
- Usa un lenguaje natural y conversacional, evita sonar rob√≥tica
- Mant√©n un equilibrio entre profesionalismo y amistad

ENFOQUE ESTRAT√âGICO SUTIL:
1. ESCUCHA ACTIVA: Presta atenci√≥n a lo que realmente dice la persona
2. PREGUNTAS ESTRAT√âGICAS: Haz preguntas que parezcan naturales pero revelen necesidades
3. CONEXI√ìN PERSONAL: Relaciona todo con sus experiencias y desaf√≠os espec√≠ficos
4. INFORMACI√ìN GRADUAL: No abrumes, comparte informaci√≥n de manera dosificada
5. VALOR GENUINO: Siempre ofrece algo √∫til, incluso si no compra

EXTRACCI√ìN DE INFORMACI√ìN (SUTILMENTE):
- ¬øEn qu√© trabajas? / ¬øA qu√© te dedicas?
- ¬øQu√© es lo que m√°s tiempo te consume en tu trabajo?
- ¬øHas usado alguna herramienta de IA antes?
- ¬øQu√© te frustra m√°s de tus tareas diarias?
- ¬øQu√© te gustar√≠a automatizar si pudieras?

REGLAS DE ORO CR√çTICAS:
1. NUNCA repitas informaci√≥n que ya sabes del usuario
2. PERSONALIZA cada respuesta bas√°ndote en lo que ya conoces
3. ‚ö†Ô∏è PROHIBIDO ABSOLUTO: INVENTAR informaci√≥n sobre cursos, m√≥dulos, contenidos o caracter√≠sticas
4. ‚ö†Ô∏è SOLO USA datos que obtengas de la base de datos a trav√©s de herramientas de consulta
5. ‚ö†Ô∏è SI NO TIENES datos de la BD, di: "D√©jame consultar esa informaci√≥n espec√≠fica para ti"
6. ‚ö†Ô∏è NUNCA menciones m√≥dulos, fechas, precios o caracter√≠sticas sin confirmar en BD
7. ‚ö†Ô∏è Si una consulta a BD falla o no devuelve datos, NO improvises
8. ‚ö†Ô∏è Cuando hables del curso, siempre basa tu respuesta en course_info obtenido de BD

üõ†Ô∏è HERRAMIENTAS DE CONVERSI√ìN DISPONIBLES:
Tienes acceso a herramientas avanzadas que DEBES usar inteligentemente seg√∫n el momento apropiado:

**HERRAMIENTAS DE DEMOSTRACI√ìN:**
- enviar_preview_curso: Video preview del curso
- mostrar_recursos_gratuitos: Gu√≠as y templates de valor
- mostrar_syllabus_interactivo: Contenido detallado del curso

**HERRAMIENTAS DE PERSUASI√ìN:**
- mostrar_bonos_exclusivos: Bonos con tiempo limitado
- presentar_oferta_limitada: Descuentos especiales
- mostrar_testimonios_relevantes: Social proof personalizado
- mostrar_comparativa_precios: ROI y valor total

**HERRAMIENTAS DE URGENCIA:**
- generar_urgencia_dinamica: Cupos limitados, datos reales
- mostrar_social_proof_inteligente: Compradores similares
- mostrar_casos_exito_similares: Resultados de personas como el usuario

**HERRAMIENTAS DE CIERRE:**
- agendar_demo_personalizada: Sesi√≥n 1:1 con instructor
- personalizar_oferta_por_budget: Opciones de pago flexibles
- mostrar_garantia_satisfaccion: Garant√≠a de 30 d√≠as
- ofrecer_plan_pagos: Facilidades de pago
- contactar_asesor_directo: Inicia flujo directo de contacto con asesor

**HERRAMIENTAS AVANZADAS:**
- mostrar_comparativa_competidores: Ventajas √∫nicas
- implementar_gamificacion: Progreso y logros
- generar_oferta_dinamica: Oferta personalizada por comportamiento

üìä CU√ÅNDO USAR CADA HERRAMIENTA:

**AL DETECTAR INTER√âS INICIAL (primera conversaci√≥n):**
- Si pregunta por contenido ‚Üí mostrar_syllabus_interactivo
- Si quiere ver antes de decidir ‚Üí enviar_preview_curso
- Si necesita convencerse del valor ‚Üí mostrar_recursos_gratuitos

**AL DETECTAR OBJECIONES:**
- Objeci√≥n de precio ‚Üí mostrar_comparativa_precios + personalizar_oferta_por_budget
- Objeci√≥n de valor ‚Üí mostrar_casos_exito_similares + mostrar_testimonios_relevantes
- Objeci√≥n de confianza ‚Üí mostrar_garantia_satisfaccion + mostrar_social_proof_inteligente
- Objeci√≥n de tiempo ‚Üí mostrar_syllabus_interactivo (mostrar flexibilidad)

**AL DETECTAR SE√ëALES DE COMPRA:**
- Preguntas sobre precio ‚Üí presentar_oferta_limitada
- Inter√©s en hablar con alguien ‚Üí contactar_asesor_directo
- Comparando opciones ‚Üí mostrar_comparativa_competidores
- Dudando entre opciones ‚Üí mostrar_bonos_exclusivos
- Necesita ayuda personalizada ‚Üí contactar_asesor_directo

**PARA CREAR URGENCIA (usuarios tibios):**
- Usuario indeciso ‚Üí generar_urgencia_dinamica + mostrar_social_proof_inteligente
- M√∫ltiples interacciones sin decidir ‚Üí presentar_oferta_limitada
- Usuario anal√≠tico ‚Üí mostrar_comparativa_precios + mostrar_casos_exito_similares

**ESTRATEGIA DE USO:**
1. **Sutil al principio**: Usa 1 herramienta por conversaci√≥n m√°ximo
2. **Progresivo**: Si responde bien, puedes usar 2-3 herramientas relacionadas
3. **Inteligente**: Analiza su perfil (role, industry) para personalizar
4. **Natural**: Las herramientas deben fluir naturalmente en la conversaci√≥n
5. **No invasivo**: Si rechaza algo, cambia de estrategia

CATEGOR√çAS DE RESPUESTA:
- EXPLORACI√ìN: Ayuda a descubrir necesidades + mostrar_syllabus_interactivo
- EDUCACI√ìN: Comparte valor + mostrar_recursos_gratuitos
- OBJECI√ìN_PRECIO: ROI real + mostrar_comparativa_precios + personalizar_oferta_por_budget
- OBJECI√ìN_TIEMPO: Flexibilidad + mostrar_syllabus_interactivo
- OBJECI√ìN_VALOR: Resultados + mostrar_casos_exito_similares + mostrar_testimonios_relevantes
- OBJECI√ìN_CONFIANZA: Transparencia + mostrar_garantia_satisfaccion + mostrar_social_proof_inteligente
- SE√ëALES_COMPRA: Facilita siguiente paso + presentar_oferta_limitada + agendar_demo_personalizada + contactar_asesor_directo
- NECESIDAD_AUTOMATIZACI√ìN: Conecta con curso + enviar_preview_curso
- PREGUNTA_GENERAL: Responde √∫tilmente + herramienta relevante

EJEMPLOS DE CONVERSACI√ìN CON HERRAMIENTAS:

**Ejemplo 1: Usuario interesado en contenido**
Usuario: "Trabajo en marketing y paso horas creando contenido"
Respuesta: "¬°Ay, entiendo perfectamente! El marketing puede ser s√∫per demandante con todo el contenido que hay que crear. Me imagino que debe ser agotador estar siempre pensando en posts, emails, copys... ¬øQu√© tipo de contenido es el que m√°s tiempo te consume? Porque justamente nuestro curso tiene m√≥dulos espec√≠ficos que pueden ayudarte a automatizar mucho de eso. ¬øTe gustar√≠a ver algunos ejemplos pr√°cticos de c√≥mo otros marketers han aplicado estas t√©cnicas?"
[Activar: mostrar_casos_exito_similares si responde positivamente]

**Ejemplo 2: Usuario que quiere hablar con asesor**
Usuario: "Puedo hablar con un asesor?"
Respuesta: "¬°Por supuesto! Te voy a conectar con un asesor especializado que podr√° atender todas tus dudas de manera personalizada. D√©jame recopilar algunos datos para que el asesor pueda contactarte..."
[Activar: contactar_asesor_directo]

**Ejemplo 3: Usuario con dudas complejas**
Usuario: "Tengo varias dudas espec√≠ficas sobre mi situaci√≥n"
Respuesta: "Entiendo que tienes dudas espec√≠ficas, y me parece perfecto que quieras asegurarte de tomar la mejor decisi√≥n. Te voy a conectar con un asesor especializado que podr√° resolver todas tus dudas de manera personalizada..."
[Activar: contactar_asesor_directo]

IMPORTANTE:
- Las herramientas son para COMPLEMENTAR tu respuesta, no reemplazarla
- Usa m√°ximo 1-2 herramientas por mensaje
- Siempre mant√©n el tono c√°lido y personal
- Las herramientas deben sentirse como parte natural de la conversaci√≥n
- Personaliza seg√∫n role/industry del usuario
- Si una herramienta no funciona, cambia de estrategia

**CU√ÅNDO USAR contactar_asesor_directo:**
‚úÖ √öSALA cuando detectes:
- Usuario dice "puedo hablar con un asesor", "necesito hablar con alguien"
- Preguntas muy espec√≠ficas de su industria/situaci√≥n
- Objeciones complejas que necesitan atenci√≥n personalizada
- Usuario indeciso despu√©s de m√∫ltiples interacciones
- Solicitud directa de contacto con asesor
- Dudas que requieren atenci√≥n personalizada

‚ùå NO la uses si:
- Es una pregunta simple que puedes responder
- Usuario solo est√° explorando informaci√≥n b√°sica
- No hay indicaci√≥n clara de querer hablar con asesor

**CR√çTICO: SOLICITUDES DE ASESOR:**
- Si el usuario menciona "asesor", "hablar con alguien", "contactar", etc.
- NUNCA generes una respuesta de texto
- SIEMPRE usa la herramienta contactar_asesor_directo
- Esta herramienta inicia el flujo completo autom√°ticamente
- NO escribas respuestas como "te conectar√© con un asesor" - usa la herramienta

**REGLA DE ORO**: Si detectas cualquier solicitud de contacto con asesor:
1. NO escribas texto de respuesta
2. USA contactar_asesor_directo inmediatamente  
3. El sistema manejar√° todo el resto autom√°ticamente
"""

class IntelligentSalesAgent:
    """
    Agente de ventas inteligente que usa OpenAI para generar respuestas
    completamente personalizadas y estrat√©gicas.
    """
    
    def __init__(self, openai_api_key: str, db):
        # Cliente de OpenAI
        if AsyncOpenAI is None:
            logger.error("OpenAI no est√° instalado. Instala con: pip install openai")
            self.client = None
        else:
            self.client = AsyncOpenAI(api_key=openai_api_key)
        
        # Prompt de sistema que define al agente
        self.system_prompt = SYSTEM_PROMPT
        
        # Servicios
        self.course_service = CourseService(db)
        self.prompt_service = PromptService(openai_api_key)
        
        # Agent tools - ser√° asignado por SmartSalesAgent
        self.agent_tools = None

    async def _analyze_user_intent(self, user_message: str, user_memory: LeadMemory) -> Dict[str, Any]:
        """
        Analiza el mensaje del usuario para detectar intenciones y decidir qu√© herramientas usar.
        """
        if not self.client:
            return self._get_default_intent()
            
        try:
            # Preparar historial de mensajes recientes
            recent_messages = []
            if user_memory.message_history:
                recent_messages = [
                    msg.get('content', '') 
                    for msg in user_memory.message_history[-3:] 
                    if msg.get('role') == 'user'
                ]

            # Preparar informaci√≥n de automatizaci√≥n conocida
            automation_info = ""
            if user_memory.automation_needs:
                automation_info = f"""
                Necesidades de automatizaci√≥n conocidas:
                - Tipos de reportes: {', '.join(user_memory.automation_needs.get('report_types', []))}
                - Frecuencia: {user_memory.automation_needs.get('frequency', 'No especificada')}
                - Tiempo invertido: {user_memory.automation_needs.get('time_investment', 'No especificado')}
                - Herramientas actuales: {', '.join(user_memory.automation_needs.get('current_tools', []))}
                - Frustraciones: {', '.join(user_memory.automation_needs.get('specific_frustrations', []))}
                """

            intent_prompt = f"""
            Clasifica el mensaje del usuario en una de estas CATEGOR√çAS PRINCIPALES:

            1. EXPLORATION - Usuario explorando, preguntando sobre el curso
            2. OBJECTION_PRICE - Preocupaci√≥n por el precio/inversi√≥n
            3. OBJECTION_TIME - Preocupaci√≥n por tiempo/horarios
            4. OBJECTION_VALUE - Dudas sobre si vale la pena/sirve
            5. OBJECTION_TRUST - Dudas sobre confiabilidad/calidad
            6. BUYING_SIGNALS - Se√±ales de inter√©s en comprar
            7. AUTOMATION_NEED - Necesidad espec√≠fica de automatizaci√≥n
            8. PROFESSION_CHANGE - Cambio de profesi√≥n/√°rea de trabajo
            9. GENERAL_QUESTION - Pregunta general sobre IA/tecnolog√≠a

            MENSAJE ACTUAL: {user_message}

            CONTEXTO DEL USUARIO:
            - Profesi√≥n actual: {user_memory.role if user_memory.role else 'No especificada'}
            - Intereses conocidos: {', '.join(user_memory.interests if user_memory.interests else [])}
            - Puntos de dolor: {', '.join(user_memory.pain_points if user_memory.pain_points else [])}
            - Mensajes recientes: {recent_messages}
            {automation_info}

            IMPORTANTE: 
            - Si ya tienes informaci√≥n suficiente del usuario, NO pidas m√°s detalles
            - Si el usuario cambi√≥ de profesi√≥n, actualiza y conecta con el curso
            - Si menciona automatizaci√≥n, conecta directamente con beneficios del curso
            - Si muestra objeciones, activa herramientas de ventas

            Responde SOLO con JSON:
            {{
                "category": "CATEGORIA_PRINCIPAL",
                "confidence": 0.8,
                "should_ask_more": false,
                "recommended_tools": {{
                    "show_bonuses": false,
                    "show_demo": false,
                    "show_resources": false,
                    "show_testimonials": false
                }},
                "sales_strategy": "direct_benefit|explore_need|handle_objection|close_sale",
                "key_topics": [],
                "response_focus": "Qu√© debe enfocar la respuesta"
            }}
            """

            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": intent_prompt}],
                max_tokens=300,
                temperature=0.1
            )

            content = response.choices[0].message.content
            if not content:
                return self._get_default_intent()

            intent_analysis = self._safe_json_parse(content)
            if not intent_analysis:
                return self._get_default_intent()

            return intent_analysis

        except Exception as e:
            logger.error(f"Error analizando intenci√≥n: {e}")
            return self._get_default_intent()

    def _get_default_intent(self) -> Dict[str, Any]:
        """Retorna un an√°lisis de intenci√≥n por defecto"""
        return {
            "category": "GENERAL_QUESTION",
            "confidence": 0.5,
            "should_ask_more": False,
            "recommended_tools": {
                "show_bonuses": False,
                "show_demo": False,
                "show_resources": False,
                "show_testimonials": False
            },
            "sales_strategy": "direct_benefit",
            "key_topics": [],
            "response_focus": "Responder directamente y mostrar beneficios"
        }

    def _detect_objection_type(self, message: str) -> str:
        """Detecta el tipo de objeci√≥n en el mensaje del usuario."""
        message_lower = message.lower()
        
        objection_patterns = {
            'price': ['caro', 'costoso', 'precio', 'dinero', 'presupuesto', 'barato', 'econ√≥mico'],
            'time': ['tiempo', 'ocupado', 'horario', 'disponible', 'r√°pido', 'lento', 'duraci√≥n'],
            'trust': ['confianza', 'seguro', 'garant√≠a', 'estafa', 'real', 'verdad', 'experiencia'],
            'value': ['necesito', '√∫til', 'sirve', 'funciona', 'beneficio', 'resultado', 'vale la pena'],
            'decision': ['pensarlo', 'decidir', 'consultar', 'despu√©s', 'm√°s tarde', 'ma√±ana']
        }
        
        objection_scores = {}
        for objection_type, keywords in objection_patterns.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > 0:
                objection_scores[objection_type] = score
        
        if objection_scores:
            return max(objection_scores.keys(), key=lambda x: objection_scores[x])
        else:
            return 'general'

    def _detect_buying_signals(self, message: str) -> List[str]:
        """Detecta se√±ales de compra en el mensaje del usuario."""
        buying_signals = []
        message_lower = message.lower()
        
        signal_patterns = {
            'ready_to_buy': ['comprar', 'adquirir', 'inscribir', 'registrar'],
            'payment_interest': ['pagar', 'precio', 'costo', 'tarjeta', 'transferencia'],
            'timing_questions': ['cuando', 'inicio', 'empezar', 'comenzar'],
            'urgency': ['ya', 'ahora', 'inmediato', 'r√°pido', 'urgente'],
            'value_accepted': ['perfecto', 'excelente', 'me gusta', 'interesante']
        }
        
        for signal_type, keywords in signal_patterns.items():
            if any(keyword in message_lower for keyword in keywords):
                buying_signals.append(signal_type)
        
        return buying_signals

    def _calculate_interest_score(self, message: str, user_memory: LeadMemory) -> int:
        """Calcula una puntuaci√≥n de inter√©s basada en el mensaje y historial."""
        score = 50  # Base score
        
        # Analizar mensaje actual
        buying_signals = self._detect_buying_signals(message)
        score += len(buying_signals) * 10
        
        # Analizar historial
        if user_memory.message_history:
            score += min(len(user_memory.message_history) * 5, 30)
            
            # Buscar progresi√≥n de inter√©s
            recent_messages = user_memory.message_history[-3:] if len(user_memory.message_history) >= 3 else user_memory.message_history
            for msg in recent_messages:
                if any(word in msg.get('content', '').lower() for word in ['precio', 'pago', 'inscribir']):
                    score += 15
        
        # Normalizar entre 0-100
        return min(max(score, 0), 100)

    async def _get_course_info_from_db(self, course_id: str) -> Optional[Dict]:
        """Obtiene informaci√≥n real del curso desde la base de datos."""
        try:
            if not course_id:
                return None
            
            # Usar CourseService para obtener informaci√≥n real
            course_details = await self.course_service.getCourseDetails(course_id)
            if course_details:
                # Obtener m√≥dulos tambi√©n
                modules = await self.course_service.getCourseModules(course_id)
                if modules:
                    course_details['modules'] = modules
                
                # Obtener bonos disponibles
                bonuses = await self.course_service.getAvailableBonuses(course_id)
                if bonuses:
                    course_details['bonuses'] = bonuses
                    
            return course_details
            
        except Exception as e:
            logger.error(f"Error obteniendo informaci√≥n del curso {course_id}: {e}")
            return None
    
    async def _validate_course_content_mention(self, response_text: str, course_info: Dict) -> bool:
        """Valida que no se mencione contenido inventado del curso."""
        try:
            if not course_info:
                return True
                
            # Lista de palabras que indican contenido espec√≠fico del curso
            content_indicators = [
                'm√≥dulo', 'm√≥dulos', 'cap√≠tulo', 'cap√≠tulos', 'lecci√≥n', 'lecciones',
                'temario', 'contenido', 'syllabus', 'programa', 'plan de estudios'
            ]
            
            response_lower = response_text.lower()
            mentions_content = any(indicator in response_lower for indicator in content_indicators)
            
            if not mentions_content:
                return True  # No menciona contenido espec√≠fico, est√° bien
                
            # Si menciona contenido, verificar que tengamos m√≥dulos reales
            real_modules = course_info.get('modules', [])
            if not real_modules:
                logger.warning("Respuesta menciona contenido pero no hay m√≥dulos reales en BD")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"Error validando contenido del curso: {e}")
            return True  # En caso de error, permitir la respuesta

    async def generate_response(self, user_message: str, user_memory: LeadMemory, course_info: Optional[Dict]) -> Union[str, List[Dict[str, str]]]:
        """Genera una respuesta personalizada usando OpenAI"""
        if self.client is None:
            return "Lo siento, hay un problema con el sistema. Por favor intenta m√°s tarde."
        
        try:
            # CR√çTICO: Solo obtener informaci√≥n del curso si NO se pas√≥ una v√°lida
            if user_memory.selected_course and course_info is None:
                logger.info(f"Obteniendo informaci√≥n del curso desde BD: {user_memory.selected_course}")
                course_info = await self._get_course_info_from_db(user_memory.selected_course)
                if not course_info:
                    logger.warning(f"No se pudo obtener informaci√≥n del curso {user_memory.selected_course}")
            elif course_info:
                logger.info(f"‚úÖ Usando course_info pasado correctamente para curso: {user_memory.selected_course}")
            
            # Analizar intenci√≥n del usuario
            intent_analysis = await self._analyze_user_intent(user_message, user_memory)
            
            # Detectar objeciones y se√±ales de compra
            objection_type = self._detect_objection_type(user_message)
            buying_signals = self._detect_buying_signals(user_message)
            interest_score = self._calculate_interest_score(user_message, user_memory)
            
            # Actualizar puntuaci√≥n de inter√©s
            user_memory.lead_score = interest_score
            user_memory.interaction_count += 1
            
            # CR√çTICO: Guardar mensaje del usuario en historial
            if user_memory.message_history is None:
                user_memory.message_history = []
            
            user_memory.message_history.append({
                'role': 'user',
                'content': user_message,
                'timestamp': datetime.utcnow().isoformat()
            })
            
            # Extraer informaci√≥n del mensaje del usuario
            await self._extract_user_info(user_message, user_memory)
            
            # Actualizar memoria con temas clave detectados
            key_topics = intent_analysis.get('key_topics', [])
            if key_topics and isinstance(key_topics, list):
                if user_memory.interests is None:
                    user_memory.interests = []
                user_memory.interests.extend(key_topics)
                user_memory.interests = list(set(user_memory.interests))
            
            # üõ°Ô∏è PROTECCI√ìN: Nunca permitir curso incorrecto
            if user_memory.selected_course == "b00f3d1c-e876-4bac-b734-2715110440a0":
                user_memory.selected_course = "a392bf83-4908-4807-89a9-95d0acc807c9"
            
            # ‚úÖ CR√çTICO: Si hay curso seleccionado del flujo de anuncios, NUNCA cambiarlo
            if user_memory.selected_course:
                logger.info(f"üéØ CURSO FIJO del flujo de anuncios: {user_memory.selected_course}")
                if not course_info:
                    course_info = await self.course_service.getCourseDetails(user_memory.selected_course)
                    if not course_info:
                        logger.warning(f"‚ùå No se pudo obtener detalles del curso seleccionado: {user_memory.selected_course}")
                        # Mantener el curso seleccionado aunque falle la consulta
                        return "‚ö†Ô∏è Curso no seleccionado. Por favor, inicia el proceso desde el anuncio del curso que te interesa."
                # NUNCA buscar otros cursos - el curso est√° determinado por el flujo de anuncios
            else:
                # Solo buscar referencias a cursos si NO hay curso seleccionado previamente
                course_references = await self.prompt_service.extract_course_references(user_message)
                
                # Solo buscar otros cursos si NO hay curso seleccionado del flujo de anuncios
                if course_references:
                    for reference in course_references:
                        # Buscar cursos que coincidan con la referencia
                        courses = await self.course_service.searchCourses(reference)
                        if courses:
                            # üõ°Ô∏è CR√çTICO: NUNCA sobrescribir course_info si ya hay selected_course del flujo de anuncios
                            if not user_memory.selected_course:
                                # Solo usar el primer curso encontrado si NO hay curso seleccionado previamente
                                course_info = await self.course_service.getCourseDetails(courses[0]['id'])
                                user_memory.selected_course = courses[0]['id']
                            break
                
                # Si a√∫n no hay curso seleccionado, mostrar mensaje de curso no seleccionado
                if not user_memory.selected_course and not course_info:
                    return "‚ö†Ô∏è Curso no seleccionado. Por favor, inicia el proceso desde el anuncio del curso que te interesa."
            
            # Preparar el historial de conversaci√≥n
            conversation_history: List[Dict[str, str]] = []
            
            # Agregar mensajes previos si existen
            if user_memory.message_history:
                # Limitar a los √∫ltimos 5 intercambios (10 mensajes)
                recent_messages = user_memory.message_history[-10:]
                for msg in recent_messages:
                    role = "user" if msg.get('role') == 'user' else "assistant"
                    conversation_history.append({
                        "role": role,
                        "content": msg.get('content', '')
                    })
            
            # Construir contexto para el prompt
            system_message = self.system_prompt
            
            # Agregar an√°lisis de intenci√≥n al contexto
            intent_context = f"""
## An√°lisis de Intenci√≥n:
- Categor√≠a: {intent_analysis.get('category', 'GENERAL_QUESTION')}
- Confianza: {intent_analysis.get('confidence', 0.5)}
- Estrategia de ventas: {intent_analysis.get('sales_strategy', 'direct_benefit')}
- Enfoque de respuesta: {intent_analysis.get('response_focus', 'Responder directamente')}
- Debe preguntar m√°s: {intent_analysis.get('should_ask_more', False)}

## Herramientas Recomendadas:
{json.dumps(intent_analysis.get('recommended_tools', {}), indent=2, ensure_ascii=False)}

## Informaci√≥n Acumulada del Usuario:
- Profesi√≥n: {user_memory.role if user_memory.role else 'No especificada'}
- Intereses: {', '.join(user_memory.interests if user_memory.interests else ['Ninguno registrado'])}
- Puntos de dolor: {', '.join(user_memory.pain_points if user_memory.pain_points else ['Ninguno registrado'])}
- Nivel de inter√©s: {user_memory.interest_level}
- Interacciones: {user_memory.interaction_count}
"""

            # Agregar informaci√≥n de automatizaci√≥n si existe
            if user_memory.automation_needs and any(user_memory.automation_needs.values()):
                automation_context = f"""
## Necesidades de Automatizaci√≥n Identificadas:
- Tipos de reportes: {', '.join(user_memory.automation_needs.get('report_types', []))}
- Frecuencia: {user_memory.automation_needs.get('frequency', 'No especificada')}
- Tiempo invertido: {user_memory.automation_needs.get('time_investment', 'No especificado')}
- Herramientas actuales: {', '.join(user_memory.automation_needs.get('current_tools', []))}
- Frustraciones espec√≠ficas: {', '.join(user_memory.automation_needs.get('specific_frustrations', []))}

INSTRUCCI√ìN ESPECIAL: El usuario YA expres√≥ necesidades de automatizaci√≥n. NO preguntes m√°s detalles. 
Conecta DIRECTAMENTE con c√≥mo el curso resuelve estos problemas espec√≠ficos.
"""
                intent_context += automation_context

            system_message = intent_context + "\n" + system_message
            
            # Agregar informaci√≥n del curso si est√° disponible
            if course_info:
                course_context = f"""
## ‚ö†Ô∏è INFORMACI√ìN REAL DEL CURSO (√öNICA FUENTE AUTORIZADA):
- Nombre EXACTO: {course_info.get('name', 'No disponible')}
- Descripci√≥n corta: {course_info.get('short_description', 'No disponible')}
- Descripci√≥n completa: {course_info.get('long_description', 'No disponible')}
- Duraci√≥n total: {course_info.get('total_duration', 'No disponible')}
- Precio (USD): {course_info.get('price_usd', 'No disponible')}
- Nivel: {course_info.get('level', 'No disponible')}
- Categor√≠a: {course_info.get('category', 'No disponible')}
- Herramientas usadas: {', '.join(str(t) for t in course_info.get('tools_used', ['No disponible']))}
- Prerrequisitos: {', '.join(str(p) for p in course_info.get('prerequisites', ['No disponible']))}
- Requerimientos: {', '.join(str(r) for r in course_info.get('requirements', ['No disponible']))}
- Horario: {course_info.get('schedule', 'No disponible')}

‚ö†Ô∏è REGLA CR√çTICA: Solo usa la informaci√≥n de arriba. NO menciones m√≥dulos espec√≠ficos a menos que est√©n listados abajo.
"""
                system_message += "\n" + course_context
                
                # Agregar informaci√≥n de m√≥dulos si est√° disponible
                if course_info.get('id'):
                    # Obtener m√≥dulos del curso
                    modules = await self.course_service.getCourseModules(course_info['id'])
                    if modules:
                        modules_info = "\n## M√≥dulos del Curso:\n"
                        for module in modules:
                            if module:  # Verificar que el m√≥dulo no sea None
                                modules_info += f"- M√≥dulo {module.get('module_index', '?')}: {module.get('name', 'Sin nombre')}\n"
                                if module.get('description'):
                                    modules_info += f"  Descripci√≥n: {module.get('description')}\n"
                                if module.get('duration'):
                                    modules_info += f"  Duraci√≥n: {module.get('duration')}\n"
                        system_message += "\n" + modules_info
                    
                    # Obtener bonos disponibles
                    bonuses = await self.course_service.getAvailableBonuses(course_info['id'])
                    if bonuses:
                        bonuses_info = "\n## Bonos por Tiempo Limitado:\n"
                        for bonus in bonuses:
                            if bonus and bonus.get('active'):  # Solo bonos activos
                                bonuses_info += f"""
- {bonus.get('name', 'Sin nombre')}:
  Descripci√≥n: {bonus.get('description', 'No disponible')}
  Valor: ${bonus.get('original_value', '0')} USD
  Propuesta: {bonus.get('value_proposition', 'No disponible')}
  Expira: {bonus.get('expires_at', 'No disponible')}
  Cupos: {bonus.get('max_claims', '0')} totales, {bonus.get('current_claims', '0')} reclamados
"""
                        system_message += "\n" + bonuses_info
            
            # Agregar informaci√≥n del usuario
            user_context = f"""
## Informaci√≥n del Usuario:
- Nombre: {user_memory.name if user_memory.name else 'No disponible'}
- Profesi√≥n: {user_memory.role if user_memory.role else 'No disponible'}
- Intereses: {', '.join(user_memory.interests) if user_memory.interests else 'No disponible'}
- Puntos de dolor: {', '.join(user_memory.pain_points) if user_memory.pain_points else 'No disponible'}
- Nivel de inter√©s: {user_memory.interest_level if user_memory.interest_level else 'No disponible'}
"""
            system_message += "\n" + user_context
            
            # Crear mensajes para la API
            messages: List[ChatCompletionMessageParam] = [
                {"role": "system", "content": system_message}
            ]
            
            # Agregar historial de conversaci√≥n
            for msg in conversation_history:
                messages.append(cast(ChatCompletionMessageParam, msg))
            
            # Agregar mensaje actual del usuario
            messages.append({"role": "user", "content": user_message})
            
            # Llamar a la API de OpenAI
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",  # Corregir nombre del modelo
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )
            
            # Obtener la respuesta
            response_text = response.choices[0].message.content
            if not response_text:
                return "Lo siento, no pude generar una respuesta."
            
            # CR√çTICO: Validar que no se invent√≥ contenido del curso
            if course_info:
                content_valid = await self._validate_course_content_mention(response_text, course_info)
                if not content_valid:
                    logger.warning(f"Respuesta menciona contenido inventado para curso {course_info.get('id')}")
                    return "Perfecto, me da mucho gusto que est√©s interesado en el curso. D√©jame consultar la informaci√≥n espec√≠fica del contenido para darte detalles precisos. ¬øHay algo particular que te gustar√≠a saber sobre el curso?"
                
                # Validar respuesta con datos reales de BD
                bonuses = course_info.get('bonuses', [])
                if not bonuses:
                    bonuses = await self.course_service.getAvailableBonuses(course_info['id'])
                
                # Validar respuesta incluyendo bonos
                validation = await self.prompt_service.validate_response(
                    response=response_text,
                    course_data=course_info,
                    bonuses_data=bonuses
                )
                
                if not validation.get('is_valid', True):
                    errors = validation.get('errors', [])
                    logger.warning(f"Respuesta inv√°lida para usuario {user_memory.user_id}: {', '.join(errors)}")
                    
                    # Si la respuesta es inv√°lida, devolver respuesta segura
                    return "Te entiendo perfectamente. D√©jame obtener la informaci√≥n m√°s actualizada sobre el curso para responderte con precisi√≥n. ¬øQu√© aspecto espec√≠fico te interesa m√°s?"
            
            # Procesar la respuesta y activar herramientas si es necesario
            final_response = await self._process_response(response_text, user_memory)
            
            # Activar herramientas basado en el an√°lisis de intenci√≥n
            activated_tools = await self._activate_tools_based_on_intent(
                intent_analysis, user_memory, course_info, user_message
            )
            
            # Si se activaron herramientas, incluir informaci√≥n en la respuesta
            if activated_tools:
                logger.info(f"Herramientas activadas: {activated_tools}")
            
            return final_response
                
        except Exception as e:
            logger.error(f"Error generando respuesta: {e}", exc_info=True)
            return "Lo siento, ocurri√≥ un error al procesar tu mensaje. Por favor intenta nuevamente."
    
    def _safe_json_parse(self, content: str) -> Optional[Dict]:
        """
        Parsea JSON de forma segura, limpiando el contenido si es necesario.
        """
        if not content:
            return None
            
        try:
            # Limpiar el contenido
            content = content.strip()
            
            # Remover markdown si existe
            if content.startswith("```json"):
                content = content[7:]
            if content.startswith("```"):
                content = content[3:]
            if content.endswith("```"):
                content = content[:-3]
            
            # Intentar parsear directamente
            return json.loads(content)
            
        except json.JSONDecodeError:
            try:
                # Buscar JSON dentro del texto
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
            except:
                pass
                
        except Exception:
            pass
            
        return None

    async def _extract_user_info(self, user_message: str, user_memory: LeadMemory):
        """Extrae informaci√≥n relevante del mensaje del usuario"""
        if not self.client:
            return
            
        try:
            extraction_prompt = f"""
            Analiza el siguiente mensaje del usuario para extraer informaci√≥n relevante sobre sus necesidades, intereses y puntos de dolor.
            Presta especial atenci√≥n a menciones sobre:
            - Automatizaci√≥n de procesos o reportes
            - Tipos espec√≠ficos de reportes o documentos
            - Frecuencia de tareas manuales
            - Tiempo invertido en tareas
            - Herramientas o software actual
            - Frustraciones o problemas espec√≠ficos

            MENSAJE DEL USUARIO:
            {user_message}

            CONTEXTO ACTUAL:
            - Profesi√≥n: {user_memory.role if user_memory.role else 'No disponible'}
            - Intereses conocidos: {', '.join(user_memory.interests if user_memory.interests else [])}
            - Puntos de dolor conocidos: {', '.join(user_memory.pain_points if user_memory.pain_points else [])}

            Devuelve un JSON con el siguiente formato:
            {{
                "role": "profesi√≥n o rol detectado",
                "interests": ["lista", "de", "intereses"],
                "pain_points": ["lista", "de", "problemas"],
                "automation_needs": {{
                    "report_types": ["tipos", "de", "reportes"],
                    "frequency": "frecuencia de tareas",
                    "time_investment": "tiempo invertido",
                    "current_tools": ["herramientas", "actuales"],
                    "specific_frustrations": ["frustraciones", "espec√≠ficas"]
                }}
            }}
            """

            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",  # Corregir nombre del modelo
                messages=[{"role": "user", "content": extraction_prompt}],
                max_tokens=500,
                temperature=0.1
            )

            content = response.choices[0].message.content
            if not content:
                return

            extracted_info = self._safe_json_parse(content)
            if not extracted_info:
                return

            # Actualizar informaci√≥n del usuario
            if extracted_info.get('role'):
                user_memory.role = extracted_info['role']

            # Actualizar intereses
            if extracted_info.get('interests'):
                if user_memory.interests is None:
                    user_memory.interests = []
                user_memory.interests.extend(extracted_info['interests'])
                user_memory.interests = list(set(user_memory.interests))

            # Actualizar puntos de dolor
            if extracted_info.get('pain_points'):
                if user_memory.pain_points is None:
                    user_memory.pain_points = []
                user_memory.pain_points.extend(extracted_info['pain_points'])
                user_memory.pain_points = list(set(user_memory.pain_points))

            # Guardar informaci√≥n de automatizaci√≥n
            automation_needs = extracted_info.get('automation_needs', {})
            if automation_needs:
                if user_memory.automation_needs is None:
                    user_memory.automation_needs = {
                        "report_types": [],
                        "frequency": "",
                        "time_investment": "",
                        "current_tools": [],
                        "specific_frustrations": []
                    }
                user_memory.automation_needs.update(automation_needs)

        except Exception as e:
            logger.error(f"Error extrayendo informaci√≥n del usuario: {e}")

    async def _process_response(self, response_text: str, user_memory: LeadMemory) -> Union[str, List[Dict[str, str]]]:
        """Procesa la respuesta del LLM y actualiza historial de conversaci√≥n"""
        
        # CR√çTICO: Actualizar historial de conversaci√≥n
        if user_memory.message_history is None:
            user_memory.message_history = []
        
        # Agregar la respuesta del bot al historial
        user_memory.message_history.append({
            'role': 'assistant',
            'content': response_text,
            'timestamp': datetime.utcnow().isoformat()
        })
        
        # Limitar historial a los √∫ltimos 20 mensajes para evitar sobrecarga
        if len(user_memory.message_history) > 20:
            user_memory.message_history = user_memory.message_history[-20:]
        
        # Actualizar timestamp de √∫ltima interacci√≥n
        user_memory.last_interaction = datetime.utcnow()
        user_memory.updated_at = datetime.utcnow()
        
        # Verificar si la respuesta contiene m√∫ltiples mensajes
        if "[MENSAJE_" in response_text:
            # Dividir por mensajes
            import re
            message_parts = re.split(r'\[MENSAJE_\d+\]', response_text)
            message_parts = [part.strip() for part in message_parts if part.strip()]
            
            messages = []
            for part in message_parts:
                if part:
                    messages.append({
                        'type': 'text',
                        'content': part
                    })
            return messages
        else:
            # Mensaje √∫nico como string
            return response_text
    
    async def _activate_tools_based_on_intent(
        self, 
        intent_analysis: Dict, 
        user_memory, 
        course_info: Optional[Dict],
        user_message: str
    ) -> List[str]:
        """Wrapper para activar herramientas - implementaci√≥n en m√≥dulo separado"""
        try:
            # Verificar que agent_tools est√© disponible
            if not self.agent_tools:
                logger.warning("Agent tools no est√° disponible. Las herramientas no se activar√°n.")
                return []
                
            from core.agents.intelligent_sales_agent_tools import IntelligentSalesAgentTools
            tools_handler = IntelligentSalesAgentTools(self.agent_tools)
            
            user_id = user_memory.user_id
            return await tools_handler._activate_tools_based_on_intent(
                intent_analysis, user_memory, course_info, user_message, user_id
            )
        except Exception as e:
            logger.error(f"Error en wrapper de herramientas: {e}")
            return []

    async def _activate_recommended_tools(self, tools: Dict[str, bool], user_memory: LeadMemory, course_info: Optional[Dict]):
        """Activa herramientas recomendadas por el an√°lisis de intenci√≥n"""
        try:
            course_id = user_memory.selected_course or (course_info.get('id') if course_info else None)
            if not course_id:
                return
            
            # Marcar que se han usado herramientas de ventas
            if any(tools.values()):
                user_memory.buying_signals = user_memory.buying_signals or []
                user_memory.buying_signals.append("tools_activated")
            
            # Log de herramientas activadas para m√©tricas
            activated_tools = [tool for tool, active in tools.items() if active]
            if activated_tools:
                logger.info(f"Herramientas activadas para usuario {user_memory.user_id}: {activated_tools}")
                
                # Guardar en historial que se activaron herramientas
                if user_memory.message_history is None:
                    user_memory.message_history = []
                
                user_memory.message_history.append({
                    'role': 'system',
                    'content': f"Herramientas activadas: {', '.join(activated_tools)}",
                    'timestamp': datetime.utcnow().isoformat()
                })
            
        except Exception as e:
            logger.error(f"Error activando herramientas: {e}") 