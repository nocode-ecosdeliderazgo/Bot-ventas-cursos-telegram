"""
Herramientas del agente de ventas para interactuar con usuarios y gestionar recursos.
VERSI√ìN MIGRADA - Compatible con nueva estructura de base de datos.
Consolidaci√≥n de todas las funciones necesarias para maximizar conversiones.
"""

import json
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional, Union
from decimal import Decimal
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

class AgentTools:
    def __init__(self, db_service, telegram_api):
        self.db = db_service
        self.telegram = telegram_api
        
        
    async def mostrar_curso_destacado(self, user_id: str, course_id: str) -> None:
        """
        Muestra una presentaci√≥n completa y atractiva de un curso espec√≠fico.
        MIGRADO: Usa ai_courses con campos actualizados.
        """
        # Obtener detalles del curso desde nueva estructura
        course = await self.db.get_course_details(course_id)
        if not course:
            return
        
        # Calcular descuento si existe (funcionalidad removida en nueva estructura)
        precio_final = course['price']  # Cambio: price_usd ‚Üí price
        
        # Usar plantilla centralizada para generar mensaje
        from core.utils.course_templates import CourseTemplates
        
        # Agregar datos de descuento calculado para la plantilla
        course_with_discount = course.copy()
        course_with_discount['calculated_price'] = precio_final
        
        mensaje = CourseTemplates.format_course_details_with_benefits(course_with_discount)
        
        # Enviar mensaje (thumbnail_url eliminado en nueva estructura)
        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown'
        )

        # Registrar interacci√≥n
        await self._registrar_interaccion(
            user_id, 
            course_id,
            "view",
            {"shown_price": precio_final}
        )

    async def enviar_preview_curso(self, user_id: str, course_id: str) -> None:
        """
        Env√≠a un video preview del curso al usuario.
        MIGRADO: Usa ai_courses, preview_url eliminado de nueva estructura.
        """
        course = await self.db.get_course_details(course_id)
        if not course:
            return

        # preview_url eliminado en nueva estructura, usar course_url
        preview_url = course.get('course_url')
        
        mensaje = f"""üé• *Preview del curso: {course['name']}*

Te comparto este video donde podr√°s ver:
- üë®üè´ Metodolog√≠a de ense√±anza
- üìö Ejemplos de contenido
- üí° Proyectos pr√°cticos
- üéØ Resultados esperados

¬°Mira el video y preg√∫ntame cualquier duda! üòä"""

        if preview_url:
            await self.telegram.send_video(
                user_id,
                preview_url,
                caption=mensaje,
                parse_mode='Markdown'
            )
        else:
            await self.telegram.send_message(
                user_id,
                mensaje + "\n\n‚ùå Video no disponible temporalmente",
                parse_mode='Markdown'
            )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "preview_watch",
            {"video_url": preview_url}
        )

    async def mostrar_syllabus_interactivo(self, user_id: str, course_id: str) -> None:
        """
        Presenta el syllabus de manera interactiva con botones para expandir m√≥dulos.
        MIGRADO: Usa ai_course_sessions en lugar de course_modules.
        """
        course = await self.db.get_course_details(course_id)
        if not course or not course.get('sessions'):
            return

        from core.utils.course_templates import CourseTemplates
        mensaje = CourseTemplates.format_course_modules_detailed(course)

        # Crear botones para sesiones interactivas
        buttons = []
        sessions = course['sessions']
        
        for session in sessions[:5]:  # Mostrar m√°ximo 5 sesiones
            buttons.append([{
                "text": f"üìñ {session['title']}",
                "callback_data": f"show_session_{session['id']}"
            }])
        
        # Agregar bot√≥n de pr√°cticas
        buttons.append([{
            "text": "üõ†Ô∏è Ver Pr√°cticas",
            "callback_data": f"show_practices_{course_id}"
        }])
        
        # Agregar bot√≥n de entregables
        buttons.append([{
            "text": "üìÅ Ver Entregables",
            "callback_data": f"show_deliverables_{course_id}"
        }])

        buttons.append([{
            "text": "üí∞ Ver Precio",
            "callback_data": f"show_pricing_{course_id}"
        }])

        keyboard = {"inline_keyboard": buttons}

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=keyboard
        )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "syllabus_view",
            {"sessions_count": len(sessions)}
        )

    async def mostrar_ofertas_limitadas(self, user_id: str, course_id: str) -> None:
        """
        Muestra ofertas por tiempo limitado para el curso.
        MANTENIDO: Usa limited_time_bonuses sin cambios.
        """
        course = await self.db.get_course_details(course_id)
        if not course:
            return

        # Obtener bonos activos (tabla se mantiene igual)
        bonos = await self.db.fetch_all(
            """
            SELECT * FROM limited_time_bonuses
            WHERE course_id = $1 AND active = true AND expires_at > NOW()
            ORDER BY expires_at ASC
            """,
            course_id
        )

        if not bonos:
            return

        mensaje = f"""üéØ *¬°Ofertas Especiales Disponibles!*

Para el curso *{course['name']}*:

"""

        for bono in bonos:
            tiempo_restante = bono['expires_at'] - datetime.now(timezone.utc)
            horas_restantes = tiempo_restante.total_seconds() / 3600
            
            mensaje += f"""üéÅ *{bono['bonus_name']}*
üí∞ Valor: ${bono['bonus_value']} USD
‚è∞ Expira en: {int(horas_restantes)} horas
üì¶ Incluye: {bono['bonus_description']}

"""

        mensaje += "‚ö° *¬°No pierdas esta oportunidad √∫nica!*"

        buttons = {
            "inline_keyboard": [
                [{"text": "üõí Aprovechar Oferta", "callback_data": f"claim_bonus_{course_id}"}],
                [{"text": "üìã Ver Detalles", "callback_data": f"show_bonus_details_{course_id}"}],
                [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
            ]
        }

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "limited_offers_shown",
            {"bonuses_count": len(bonos)}
        )

    async def agendar_demo_personalizada(self, user_id: str, course_id: str) -> None:
        """
        Permite agendar una demo personalizada 1:1 con instructor.
        MIGRADO: Usa ai_courses con campos actualizados.
        """
        course = await self.db.get_course_details(course_id)
        if not course:
            return

        mensaje = f"""üéØ *Demo Personalizada 1:1*

Para el curso: *{course['name']}*

En esta sesi√≥n personal de 30 minutos:
- üë®üè´ Conocer√°s al instructor
- üìö Ver√°s el contenido en vivo
- üí° Resolver√°s tus dudas espec√≠ficas
- üéØ Dise√±aremos tu plan de aprendizaje

*¬°Completamente gratis y sin compromiso!*

üìÖ Horarios disponibles:
‚Ä¢ Lunes a Viernes: 9:00 AM - 6:00 PM
‚Ä¢ S√°bados: 10:00 AM - 2:00 PM
‚Ä¢ Domingos: Cerrado

¬øCu√°ndo te gustar√≠a agendar?"""

        # demo_request_link eliminado en nueva estructura, usar purchase_url
        demo_link = course.get('purchase_url', '#')
        
        buttons = {
            "inline_keyboard": [
                [{"text": "üìÖ Agendar Ahora", "url": demo_link}],
                [{"text": "üí¨ Escribir Horario Preferido", "callback_data": f"schedule_manual_{course_id}"}],
                [{"text": "üìö Ver M√°s Info del Curso", "callback_data": f"show_syllabus_{course_id}"}],
                [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
            ]
        }

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "demo_request",
            {}
        )

        # Actualizar lead como altamente interesado
        await self.db.execute(
            "UPDATE user_leads SET stage = 'demo_solicitada', interest_score = LEAST(interest_score + 20, 100) WHERE telegram_id = $1",
            str(user_id)
        )

    async def enviar_recursos_gratuitos(self, user_id: str, course_id: str) -> None:
        """
        Env√≠a recursos de valor relacionados al curso para demostrar calidad.
        MIGRADO: Usa ai_session_deliverables en lugar de free_resources.
        """
        course = await self.db.get_course_details(course_id)
        if not course:
            return

        # Obtener entregables gratuitos desde nueva estructura
        free_resources = await self.db.fetch_all(
            """
            SELECT 
                d.name as resource_name,
                d.type as resource_type,
                d.resource_url,
                d.estimated_duration_min,
                s.title as session_title
            FROM ai_session_deliverables d
            JOIN ai_course_sessions s ON d.session_id = s.id
            WHERE s.course_id = $1 AND d.is_mandatory = false
            ORDER BY s.session_index, d.name
            """,
            course_id
        )

        mensaje = f"""üéÅ *¬°Regalo especial para ti!*

Te comparto estos recursos gratuitos del curso *{course['name']}*:

üìö *Recursos disponibles:*
"""

        buttons_list = []
        
        if free_resources:
            for resource in free_resources:
                # Agregar descripci√≥n del recurso
                duration_text = f" ({resource['estimated_duration_min']} min)" if resource['estimated_duration_min'] else ""
                mensaje += f"‚Ä¢ {resource['resource_name']}{duration_text}\n"
                mensaje += f"  üìñ Sesi√≥n: {resource['session_title']}\n"
                
                # Agregar bot√≥n de descarga
                if resource['resource_url']:
                    buttons_list.append([{"text": f"üì• {resource['resource_name']}", "url": resource['resource_url']}])
        else:
            mensaje += "‚Ä¢ Gu√≠a PDF: \"Primeros pasos en IA\"\n"
            mensaje += "‚Ä¢ Templates listos para usar\n"
            mensaje += "‚Ä¢ Lista de herramientas recomendadas\n"
            mensaje += "‚Ä¢ Checklist de mejores pr√°cticas\n"
            
            # Bot√≥n de recursos generales si no hay recursos espec√≠ficos
            if course.get('course_url'):
                buttons_list.append([{"text": "üì• Descargar Recursos", "url": course['course_url']}])

        mensaje += "\nüí° *¬°Estos recursos est√°n disponibles gratis para todos!*\n\n¬øTe gustar√≠a conocer m√°s sobre nuestros cursos? üëÜ"

        # Agregar botones adicionales
        buttons_list.extend([
            [{"text": "üìö Ver Contenido Completo", "callback_data": f"show_syllabus_{course_id}"}],
            [{"text": "üí∞ Ver Oferta Especial", "callback_data": f"show_pricing_{course_id}"}],
            [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
        ])

        buttons = {"inline_keyboard": buttons_list}

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "free_resources_sent",
            {"resources_count": len(free_resources)}
        )

    async def mostrar_comparativa_precios(self, user_id: str, course_id: str) -> None:
        """
        Muestra comparativa de precios y valor total del curso.
        MIGRADO: Usa ai_courses con campos simplificados.
        """
        course = await self.db.get_course_details(course_id)
        if not course:
            return

        # Campos simplificados en nueva estructura
        precio_curso = course['price']
        currency = course.get('currency', 'USD')
        
        mensaje = f"""üí∞ *An√°lisis de Inversi√≥n*

Para el curso: *{course['name']}*

üí≥ **Precio del curso:** ${precio_curso} {currency}

üìä **Valor que recibes:**
‚Ä¢ üìö {course.get('session_count', 0)} sesiones completas
‚Ä¢ ‚è±Ô∏è {course.get('total_duration_min', 0)} minutos de contenido
‚Ä¢ üìñ Material de estudio incluido
‚Ä¢ üéì Certificado al completar
‚Ä¢ üí¨ Soporte directo con instructores
‚Ä¢ üîÑ Acceso de por vida
‚Ä¢ üì± Acceso desde cualquier dispositivo

**Valor total estimado:** ${precio_curso * 3} {currency}
**Tu precio:** ${precio_curso} {currency}
**Ahorro:** ${precio_curso * 2} {currency}

üí° **Comparativa con alternativas:**
‚Ä¢ Curso universitario: ${precio_curso * 5} {currency}
‚Ä¢ Consultor√≠a 1:1: ${precio_curso * 8} {currency}
‚Ä¢ Bootcamp presencial: ${precio_curso * 10} {currency}

¬°Est√°s ahorrando m√°s del 80% comparado con otras opciones!"""

        buttons = {
            "inline_keyboard": [
                [{"text": "üí≥ Inscribirme Ahora", "callback_data": f"enroll_{course_id}"}],
                [{"text": "üí∞ Ver Opciones de Pago", "callback_data": f"payment_options_{course_id}"}],
                [{"text": "üìä Garant√≠a de Satisfacci√≥n", "callback_data": f"show_guarantee_{course_id}"}],
                [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
            ]
        }

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            course_id,
            "pricing_comparison_shown",
            {"shown_price": precio_curso}
        )

    async def mostrar_session_practices(self, user_id: str, session_id: str) -> None:
        """
        Muestra las pr√°cticas de una sesi√≥n espec√≠fica.
        NUEVO: Funcionalidad agregada para nueva estructura.
        """
        # Obtener pr√°cticas desde nueva estructura
        practices = await self.db.fetch_all(
            """
            SELECT 
                p.title,
                p.description,
                p.estimated_duration_min,
                p.resource_type,
                p.is_mandatory,
                s.title as session_title
            FROM ai_session_practices p
            JOIN ai_course_sessions s ON p.session_id = s.id
            WHERE p.session_id = $1
            ORDER BY p.practice_index
            """,
            session_id
        )

        if not practices:
            return

        session_title = practices[0]['session_title']
        
        mensaje = f"""üõ†Ô∏è *Pr√°cticas de la Sesi√≥n*

*{session_title}*

üìù **Ejercicios pr√°cticos:**
"""

        for i, practice in enumerate(practices, 1):
            mandatory_icon = "üî¥" if practice['is_mandatory'] else "üü°"
            duration_text = f" ({practice['estimated_duration_min']} min)" if practice['estimated_duration_min'] else ""
            
            mensaje += f"\n{mandatory_icon} **{i}. {practice['title']}**{duration_text}\n"
            mensaje += f"   {practice['description']}\n"
            if practice['resource_type']:
                mensaje += f"   üìÅ Tipo: {practice['resource_type']}\n"

        mensaje += "\nüî¥ Obligatorio | üü° Opcional"

        buttons = {
            "inline_keyboard": [
                [{"text": "üìñ Volver a Sesiones", "callback_data": f"show_syllabus_{session_id}"}],
                [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
            ]
        }

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            session_id,
            "session_practices_shown",
            {"practices_count": len(practices)}
        )

    async def mostrar_session_deliverables(self, user_id: str, session_id: str) -> None:
        """
        Muestra los entregables de una sesi√≥n espec√≠fica.
        NUEVO: Funcionalidad agregada para nueva estructura.
        """
        # Obtener entregables desde nueva estructura
        deliverables = await self.db.fetch_all(
            """
            SELECT 
                d.name,
                d.type,
                d.resource_url,
                d.estimated_duration_min,
                d.is_mandatory,
                s.title as session_title
            FROM ai_session_deliverables d
            JOIN ai_course_sessions s ON d.session_id = s.id
            WHERE d.session_id = $1
            ORDER BY d.name
            """,
            session_id
        )

        if not deliverables:
            return

        session_title = deliverables[0]['session_title']
        
        mensaje = f"""üìÅ *Entregables de la Sesi√≥n*

*{session_title}*

üì¶ **Recursos incluidos:**
"""

        buttons_list = []
        
        for i, deliverable in enumerate(deliverables, 1):
            mandatory_icon = "üî¥" if deliverable['is_mandatory'] else "üü°"
            duration_text = f" ({deliverable['estimated_duration_min']} min)" if deliverable['estimated_duration_min'] else ""
            
            mensaje += f"\n{mandatory_icon} **{i}. {deliverable['name']}**{duration_text}\n"
            mensaje += f"   üìÑ Tipo: {deliverable['type']}\n"
            
            # Agregar bot√≥n de descarga si hay URL
            if deliverable['resource_url']:
                buttons_list.append([{"text": f"üì• {deliverable['name']}", "url": deliverable['resource_url']}])

        mensaje += "\nüî¥ Obligatorio | üü° Opcional"

        # Agregar botones adicionales
        buttons_list.extend([
            [{"text": "üìñ Volver a Sesiones", "callback_data": f"show_syllabus_{session_id}"}],
            [{"text": "üßë‚Äçüíº Contactar Asesor", "callback_data": "contact_advisor"}]
        ])

        buttons = {"inline_keyboard": buttons_list}

        await self.telegram.send_message(
            user_id,
            mensaje,
            parse_mode='Markdown',
            reply_markup=buttons
        )

        await self._registrar_interaccion(
            user_id,
            session_id,
            "session_deliverables_shown",
            {"deliverables_count": len(deliverables)}
        )

    async def contactar_asesor_directo(self, user_id: str, course_id: str = None) -> None:
        """
        Inicia flujo directo de contacto con asesor.
        VERSI√ìN SIMPLIFICADA: Activa el flujo directamente sin mocks complejos
        """
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            from core.utils.memory import GlobalMemory
            
            logger.info(f"üõ†Ô∏è Activando flujo de contacto para usuario: {user_id}")
            
            # Obtener memoria del usuario
            memory = GlobalMemory().get_lead_memory(user_id)
            
            # Si hay un course_id espec√≠fico, guardarlo en memoria
            if course_id:
                memory.selected_course = course_id
                GlobalMemory().save_lead_memory(user_id, memory)
                logger.info(f"üìö Curso seleccionado: {course_id}")
            
            # Verificar qu√© informaci√≥n falta
            missing_info = []
            if not memory.email:
                missing_info.append("email")
            if not memory.phone:
                missing_info.append("tel√©fono")
            if not memory.selected_course:
                missing_info.append("curso de inter√©s")
            
            if missing_info:
                # Solicitar informaci√≥n faltante
                await self._request_missing_contact_info(user_id, missing_info)
            else:
                # Toda la informaci√≥n est√° disponible, proceder con confirmaci√≥n
                await self._send_contact_confirmation(user_id)
            
            logger.info("‚úÖ Flujo de contacto activado exitosamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error activando flujo de contacto: {e}")
            # Fallback: enviar mensaje directo
            await self._send_contact_fallback_message(user_id)

    async def _request_missing_contact_info(self, user_id: str, missing_info: list):
        """Solicita informaci√≥n faltante para el contacto con asesor."""
        try:
            from core.utils.memory import GlobalMemory
            
            # Determinar qu√© pedir primero
            if "email" in missing_info:
                message = """¬°Perfecto! Te voy a conectar con un asesor especializado.
                
Para que pueda ayudarte de la mejor manera, necesito tu informaci√≥n de contacto.

üìß **Por favor, env√≠ame tu email:**"""
                
                # Configurar el stage para esperar email
                memory = GlobalMemory().get_lead_memory(user_id)
                memory.stage = "awaiting_email"
                GlobalMemory().save_lead_memory(user_id, memory)
                
            elif "tel√©fono" in missing_info:
                message = """üì± **Ahora necesito tu n√∫mero de tel√©fono:**

Por favor, env√≠amelo en formato: +XX XXXXXXXXXX"""
                
                # Configurar el stage para esperar tel√©fono
                memory = GlobalMemory().get_lead_memory(user_id)
                memory.stage = "awaiting_phone"
                GlobalMemory().save_lead_memory(user_id, memory)
                
            elif "curso de inter√©s" in missing_info:
                message = """üìö **Finalmente, necesito saber qu√© curso te interesa:**

¬øPodr√≠as decirme cu√°l es tu principal √°rea de inter√©s?"""
                
                # Mostrar cursos disponibles
                await self._show_available_courses(user_id)
                return
                
            else:
                message = """¬°Perfecto! Ya tengo toda tu informaci√≥n.
                
Un asesor se pondr√° en contacto contigo muy pronto."""
                await self._send_contact_confirmation(user_id)
                return
            
            await self.telegram.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error solicitando informaci√≥n faltante: {e}")
    
    async def _show_available_courses(self, user_id: str):
        """Muestra los cursos disponibles para selecci√≥n."""
        try:
            # Obtener cursos desde la base de datos
            from core.services.courseService import CourseService
            course_service = CourseService(self.db)
            
            # Obtener cursos disponibles
            courses = await course_service.getAllCourses()
            
            if not courses:
                await self.telegram.send_message(
                    chat_id=user_id,
                    text="Actualmente tenemos cursos de Inteligencia Artificial disponibles. Un asesor te dar√° todos los detalles."
                )
                return
            
            # Crear lista de cursos
            course_list = "üìö **Cursos disponibles:**\n\n"
            for i, course in enumerate(courses[:3], 1):  # Mostrar m√°ximo 3 cursos
                course_list += f"{i}. {course.get('name', 'Curso de IA')}\n"
            
            course_list += "\n¬øCu√°l te interesa m√°s?"
            
            await self.telegram.send_message(
                chat_id=user_id,
                text=course_list,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error mostrando cursos disponibles: {e}")
            # Fallback
            await self.telegram.send_message(
                chat_id=user_id,
                text="Un asesor te ayudar√° a elegir el curso perfecto para ti."
            )
    
    async def _send_contact_confirmation(self, user_id: str):
        """Env√≠a confirmaci√≥n y ejecuta el env√≠o de correo al asesor."""
        try:
            from core.utils.memory import GlobalMemory
            from core.handlers.contact_flow import send_advisor_email
            
            # Obtener datos del usuario
            memory = GlobalMemory().get_lead_memory(user_id)
            
            # Obtener nombre del curso si est√° disponible
            course_name = "Curso de IA para Profesionales"  # Default
            if memory.selected_course:
                try:
                    from core.services.courseService import CourseService
                    course_service = CourseService(self.db)
                    course_details = await course_service.getCourseDetails(memory.selected_course)
                    if course_details:
                        course_name = course_details.get('name', course_name)
                except Exception as e:
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.error(f"Error obteniendo detalles del curso: {e}")
            
            # Preparar datos para el asesor
            user_data = {
                "name": memory.name or "Usuario",
                "email": memory.email,
                "phone": memory.phone,
                "course_name": course_name
            }
            
            # Enviar email al asesor
            email_sent = send_advisor_email(user_data)
            
            if email_sent:
                confirmation_message = f"""‚úÖ **¬°Listo!** Tu informaci√≥n ha sido enviada correctamente.
                
üìã **Resumen de tus datos:**
‚Ä¢ Nombre: {user_data['name']}
‚Ä¢ Email: {user_data['email']}
‚Ä¢ Tel√©fono: {user_data['phone']}
‚Ä¢ Curso de inter√©s: {user_data['course_name']}

üìû **Un asesor especializado se pondr√° en contacto contigo muy pronto.**

¬°Gracias por tu inter√©s en nuestros cursos!"""
            else:
                confirmation_message = """‚ö†Ô∏è **Informaci√≥n recibida** pero hubo un problema t√©cnico.
                
No te preocupes, hemos registrado tu inter√©s y nos pondremos en contacto contigo a la brevedad.

Si tienes alguna urgencia, puedes contactarnos directamente."""
            
            await self.telegram.send_message(
                chat_id=user_id,
                text=confirmation_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error enviando confirmaci√≥n de contacto: {e}")
            await self._send_contact_fallback_message(user_id)
    
    async def _send_contact_fallback_message(self, user_id: str):
        """Env√≠a mensaje de fallback cuando falla el flujo de contacto."""
        try:
            fallback_message = """¬°Perfecto! Quiero conectarte con un asesor especializado.
            
Para que pueda ayudarte de la mejor manera, necesito algunos datos:

üìß **Env√≠ame tu email**
üì± **Env√≠ame tu n√∫mero de tel√©fono**

Una vez que tengas estos datos, un asesor se pondr√° en contacto contigo a la brevedad."""
            
            await self.telegram.send_message(
                chat_id=user_id,
                text=fallback_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error enviando mensaje fallback: {e}")

    async def activar_flujo_contacto_asesor(self, user_id: str, course_id: str = None) -> str:
        """
        Funci√≥n wrapper para activar el flujo de contacto desde el agente inteligente.
        Retorna un mensaje de confirmaci√≥n para el usuario.
        """
        try:
            # Activar el flujo de contacto
            await self.contactar_asesor_directo(user_id, course_id)
            
            # Retornar mensaje de confirmaci√≥n
            return """¬°Perfecto! He iniciado el proceso para conectarte con un asesor especializado.
            
Por favor, sigue las instrucciones que te voy a enviar para recopilar tus datos de contacto."""
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error activando flujo de contacto desde agente: {e}")
            
            return """Te entiendo perfectamente. D√©jame obtener la informaci√≥n m√°s actualizada sobre el curso para responderte con precisi√≥n. ¬øQu√© aspecto espec√≠fico te interesa m√°s?"""

    async def _registrar_interaccion(self, user_id: str, course_id: str, action: str, metadata: dict) -> None:
        """
        Registra interacciones del usuario para an√°lisis.
        MANTENIDO: Tabla course_interactions sin cambios.
        """
        try:
            await self.db.execute(
                """
                INSERT INTO course_interactions 
                (lead_id, course_id, interaction_type, metadata, created_at)
                VALUES (
                    (SELECT id FROM user_leads WHERE telegram_id = $1),
                    $2, $3, $4, NOW()
                )
                """,
                str(user_id), course_id, action, json.dumps(metadata)
            )
        except Exception as e:
            print(f"Error registrando interacci√≥n: {e}")

    # M√©todos adicionales para compatibilidad con herramientas existentes...
    # [Resto de m√©todos se mantienen similares con adaptaciones de campos]