"""
Agente de ventas inteligente que usa OpenAI para generar respuestas
completamente personalizadas basadas en el perfil del usuario.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Union, cast
from datetime import datetime
import json

try:
    from openai import AsyncOpenAI
    from openai.types.chat import ChatCompletionMessageParam
except ImportError:
    AsyncOpenAI = None
    ChatCompletionMessageParam = Dict[str, str]  # Tipo para compatibilidad

from core.utils.memory import LeadMemory
from core.services.courseService import CourseService
from core.services.promptService import PromptService
from core.agents.intelligent_conversation_processor import IntelligentConversationProcessor

logger = logging.getLogger(__name__)

SYSTEM_PROMPT = """
Eres Brenda, una asesora especializada en cursos de Inteligencia Artificial de "Aprenda y Aplique IA". 
Tu objetivo es ayudar a las personas a descubrir c√≥mo la IA puede transformar su trabajo y vida, de manera c√°lida y natural, como si fueras una amiga genuinamente interesada en su bienestar profesional.

PERSONALIDAD Y TONO:
- Habla con calidez y cercan√≠a, como una amiga que realmente se preocupa
- S√© aut√©ntica y emp√°tica, escucha antes de hablar
- Muestra inter√©s genuino en la persona, no solo en vender
- Usa un lenguaje natural y conversacional, evita sonar rob√≥tica
- Mant√©n un equilibrio entre profesionalismo y amistad

ENFOQUE ESTRAT√âGICO SUTIL:
1. ESCUCHA ACTIVA: Presta atenci√≥n a lo que realmente dice la persona
2. PREGUNTAS ESTRAT√âGICAS: Haz preguntas que parezcan naturales pero revelen necesidades
3. CONEXI√ìN PERSONAL: Relaciona todo con sus experiencias y desaf√≠os espec√≠ficos
4. INFORMACI√ìN GRADUAL: No abrumes, comparte informaci√≥n de manera dosificada
5. VALOR GENUINO: Siempre ofrece algo √∫til, incluso si no compra

EXTRACCI√ìN DE INFORMACI√ìN (SUTILMENTE):
- ¬øEn qu√© trabajas? / ¬øA qu√© te dedicas?
- ¬øQu√© es lo que m√°s tiempo te consume en tu trabajo?
- ¬øHas usado alguna herramienta de IA antes?
- ¬øQu√© te frustra m√°s de tus tareas diarias?
- ¬øQu√© te gustar√≠a automatizar si pudieras?

REGLAS DE ORO CR√çTICAS:
1. NUNCA repitas informaci√≥n que ya sabes del usuario
2. PERSONALIZA cada respuesta bas√°ndote en lo que ya conoces
3. ‚ö†Ô∏è PROHIBIDO ABSOLUTO: INVENTAR informaci√≥n sobre cursos, m√≥dulos, contenidos o caracter√≠sticas
4. ‚ö†Ô∏è SOLO USA datos que obtengas de la base de datos a trav√©s de herramientas de consulta
5. ‚ö†Ô∏è SI NO TIENES datos de la BD, di: "D√©jame consultar esa informaci√≥n espec√≠fica para ti"
6. ‚ö†Ô∏è NUNCA menciones m√≥dulos, fechas, precios o caracter√≠sticas sin confirmar en BD
7. ‚ö†Ô∏è Si una consulta a BD falla o no devuelve datos, NO improvises
8. ‚ö†Ô∏è Cuando hables del curso, siempre basa tu respuesta en course_info obtenido de BD

üõ†Ô∏è HERRAMIENTAS DE CONVERSI√ìN DISPONIBLES:
Tienes acceso a herramientas avanzadas que DEBES usar inteligentemente seg√∫n el momento apropiado:

**HERRAMIENTAS DE DEMOSTRACI√ìN:**
- enviar_preview_curso: Video preview del curso
- enviar_recursos_gratuitos: Gu√≠as y templates de valor (PDFs, templates)
- mostrar_syllabus_interactivo: Contenido detallado del curso

**HERRAMIENTAS DE PERSUASI√ìN:**
- mostrar_bonos_exclusivos: Bonos con tiempo limitado
- presentar_oferta_limitada: Descuentos especiales
- mostrar_testimonios_relevantes: Social proof personalizado
- mostrar_comparativa_precios: ROI y valor total

**HERRAMIENTAS DE URGENCIA:**
- generar_urgencia_dinamica: Cupos limitados, datos reales
- mostrar_social_proof_inteligente: Compradores similares
- mostrar_casos_exito_similares: Resultados de personas como el usuario

**HERRAMIENTAS DE CIERRE:**
- agendar_demo_personalizada: Sesi√≥n 1:1 con instructor
- personalizar_oferta_por_budget: Opciones de pago flexibles
- mostrar_garantia_satisfaccion: Garant√≠a de 30 d√≠as
- ofrecer_plan_pagos: Facilidades de pago
- contactar_asesor_directo: Inicia flujo directo de contacto con asesor

**HERRAMIENTAS AVANZADAS:**
- mostrar_comparativa_competidores: Ventajas √∫nicas
- implementar_gamificacion: Progreso y logros
- generar_oferta_dinamica: Oferta personalizada por comportamiento

üìä CU√ÅNDO USAR CADA HERRAMIENTA:

**AL DETECTAR INTER√âS INICIAL (primera conversaci√≥n):**
- Si pregunta por contenido ‚Üí mostrar_syllabus_interactivo
- Si quiere ver antes de decidir ‚Üí enviar_preview_curso
- Si necesita convencerse del valor ‚Üí enviar_recursos_gratuitos
- Si pide recursos gratuitos o gu√≠as ‚Üí enviar_recursos_gratuitos

**AL DETECTAR OBJECIONES:**
- Objeci√≥n de precio ‚Üí mostrar_comparativa_precios + personalizar_oferta_por_budget
- Objeci√≥n de valor ‚Üí mostrar_casos_exito_similares + mostrar_testimonios_relevantes
- Objeci√≥n de confianza ‚Üí mostrar_garantia_satisfaccion + mostrar_social_proof_inteligente
- Objeci√≥n de tiempo ‚Üí mostrar_syllabus_interactivo (mostrar flexibilidad)

**AL DETECTAR SE√ëALES DE COMPRA:**
- Preguntas sobre precio ‚Üí presentar_oferta_limitada
- Inter√©s en hablar con alguien ‚Üí contactar_asesor_directo
- Comparando opciones ‚Üí mostrar_comparativa_competidores
- Dudando entre opciones ‚Üí mostrar_bonos_exclusivos
- Necesita ayuda personalizada ‚Üí contactar_asesor_directo

**PARA CREAR URGENCIA (usuarios tibios):**
- Usuario indeciso ‚Üí generar_urgencia_dinamica + mostrar_social_proof_inteligente
- M√∫ltiples interacciones sin decidir ‚Üí presentar_oferta_limitada
- Usuario anal√≠tico ‚Üí mostrar_comparativa_precios + mostrar_casos_exito_similares

**ESTRATEGIA DE USO:**
1. **Sutil al principio**: Usa 1 herramienta por conversaci√≥n m√°ximo
2. **Progresivo**: Si responde bien, puedes usar 2-3 herramientas relacionadas
3. **Inteligente**: Analiza su perfil (role, industry) para personalizar
4. **Natural**: Las herramientas deben fluir naturalmente en la conversaci√≥n
5. **No invasivo**: Si rechaza algo, cambia de estrategia

CATEGOR√çAS DE RESPUESTA:
- EXPLORACI√ìN: Ayuda a descubrir necesidades + mostrar_syllabus_interactivo
- EDUCACI√ìN: Comparte valor + enviar_recursos_gratuitos
- RECURSOS_GRATUITOS: Solicitud directa de recursos + enviar_recursos_gratuitos
- OBJECI√ìN_PRECIO: ROI real + mostrar_comparativa_precios + personalizar_oferta_por_budget
- OBJECI√ìN_TIEMPO: Flexibilidad + mostrar_syllabus_interactivo
- OBJECI√ìN_VALOR: Resultados + mostrar_casos_exito_similares + mostrar_testimonios_relevantes
- OBJECI√ìN_CONFIANZA: Transparencia + mostrar_garantia_satisfaccion + mostrar_social_proof_inteligente
- SE√ëALES_COMPRA: Facilita siguiente paso + presentar_oferta_limitada + agendar_demo_personalizada + contactar_asesor_directo
- NECESIDAD_AUTOMATIZACI√ìN: Conecta con curso + enviar_preview_curso
- PREGUNTA_GENERAL: Responde √∫tilmente + herramienta relevante

EJEMPLOS DE CONVERSACI√ìN CON HERRAMIENTAS:

**Ejemplo 1: Usuario interesado en contenido**
Usuario: "Trabajo en marketing y paso horas creando contenido"
Respuesta: "¬°Ay, entiendo perfectamente! El marketing puede ser s√∫per demandante con todo el contenido que hay que crear. Me imagino que debe ser agotador estar siempre pensando en posts, emails, copys... ¬øQu√© tipo de contenido es el que m√°s tiempo te consume? Porque justamente nuestro curso tiene m√≥dulos espec√≠ficos que pueden ayudarte a automatizar mucho de eso. ¬øTe gustar√≠a ver algunos ejemplos pr√°cticos de c√≥mo otros marketers han aplicado estas t√©cnicas?"
[Activar: mostrar_casos_exito_similares si responde positivamente]

**Ejemplo 2: Usuario que quiere hablar con asesor**
Usuario: "Puedo hablar con un asesor?"
Respuesta: "¬°Por supuesto! Te voy a conectar con un asesor especializado que podr√° atender todas tus dudas de manera personalizada. D√©jame recopilar algunos datos para que el asesor pueda contactarte..."
[Activar: contactar_asesor_directo]

**Ejemplo 3: Usuario con dudas complejas**
Usuario: "Tengo varias dudas espec√≠ficas sobre mi situaci√≥n"
Respuesta: "Entiendo que tienes dudas espec√≠ficas, y me parece perfecto que quieras asegurarte de tomar la mejor decisi√≥n. Te voy a conectar con un asesor especializado que podr√° resolver todas tus dudas de manera personalizada..."
[Activar: contactar_asesor_directo]

IMPORTANTE:
- Las herramientas son para COMPLEMENTAR tu respuesta, no reemplazarla
- Usa m√°ximo 1-2 herramientas por mensaje
- Siempre mant√©n el tono c√°lido y personal
- Las herramientas deben sentirse como parte natural de la conversaci√≥n
- Personaliza seg√∫n role/industry del usuario
- Si una herramienta no funciona, cambia de estrategia

**CU√ÅNDO USAR contactar_asesor_directo:**
‚úÖ √öSALA cuando detectes:
- Usuario dice "puedo hablar con un asesor", "necesito hablar con alguien"
- Preguntas muy espec√≠ficas de su industria/situaci√≥n
- Objeciones complejas que necesitan atenci√≥n personalizada
- Usuario indeciso despu√©s de m√∫ltiples interacciones
- Solicitud directa de contacto con asesor
- Dudas que requieren atenci√≥n personalizada

‚ùå NO la uses si:
- Es una pregunta simple que puedes responder
- Usuario solo est√° explorando informaci√≥n b√°sica
- No hay indicaci√≥n clara de querer hablar con asesor

**CR√çTICO: SOLICITUDES DE ASESOR:**
- Si el usuario menciona "asesor", "hablar con alguien", "contactar", etc.
- NUNCA generes una respuesta de texto
- SIEMPRE usa la herramienta contactar_asesor_directo
- Esta herramienta inicia el flujo completo autom√°ticamente
- NO escribas respuestas como "te conectar√© con un asesor" - usa la herramienta

**REGLA DE ORO**: Si detectas cualquier solicitud de contacto con asesor:
1. NO escribas texto de respuesta
2. USA contactar_asesor_directo inmediatamente  
3. El sistema manejar√° todo el resto autom√°ticamente
"""

class IntelligentSalesAgent:
    """
    Agente de ventas inteligente que usa OpenAI para generar respuestas
    completamente personalizadas y estrat√©gicas.
    """
    
    def __init__(self, openai_api_key: str, db):
        # Cliente de OpenAI
        if AsyncOpenAI is None:
            logger.error("OpenAI no est√° instalado. Instala con: pip install openai")
            self.client = None
        else:
            self.client = AsyncOpenAI(api_key=openai_api_key)
        
        # Prompt de sistema que define al agente
        self.system_prompt = SYSTEM_PROMPT
        
        # Servicios
        self.course_service = CourseService(db)
        self.prompt_service = PromptService(openai_api_key)
        
        # Procesador conversacional inteligente
        self.conversation_processor = IntelligentConversationProcessor(
            self.client, db, self.course_service
        )
        
        # Agent tools - ser√° asignado por SmartSalesAgent
        self.agent_tools = None

    async def _analyze_user_intent(self, user_message: str, user_memory: LeadMemory) -> Dict[str, Any]:
        """
        Analiza el mensaje del usuario para detectar intenciones y decidir qu√© herramientas usar.
        """
        if not self.client:
            return self._get_default_intent()
            
        try:
            # Preparar historial de mensajes recientes
            recent_messages = []
            if user_memory.message_history:
                recent_messages = [
                    msg.get('content', '') 
                    for msg in user_memory.message_history[-3:] 
                    if msg.get('role') == 'user'
                ]

            # Preparar informaci√≥n de automatizaci√≥n conocida
            automation_info = ""
            if user_memory.automation_needs:
                automation_info = f"""
                Necesidades de automatizaci√≥n conocidas:
                - Tipos de reportes: {', '.join(user_memory.automation_needs.get('report_types', []))}
                - Frecuencia: {user_memory.automation_needs.get('frequency', 'No especificada')}
                - Tiempo invertido: {user_memory.automation_needs.get('time_investment', 'No especificado')}
                - Herramientas actuales: {', '.join(user_memory.automation_needs.get('current_tools', []))}
                - Frustraciones: {', '.join(user_memory.automation_needs.get('specific_frustrations', []))}
                """

            intent_prompt = f"""
            Clasifica el mensaje del usuario en una de estas CATEGOR√çAS PRINCIPALES:

            1. EXPLORATION - Usuario explorando, preguntando sobre el curso
            2. OBJECTION_PRICE - Preocupaci√≥n por el precio/inversi√≥n
            3. OBJECTION_TIME - Preocupaci√≥n por tiempo/horarios
            4. OBJECTION_VALUE - Dudas sobre si vale la pena/sirve
            5. OBJECTION_TRUST - Dudas sobre confiabilidad/calidad
            6. BUYING_SIGNALS - Se√±ales de inter√©s en comprar
            7. AUTOMATION_NEED - Necesidad espec√≠fica de automatizaci√≥n
            8. PROFESSION_CHANGE - Cambio de profesi√≥n/√°rea de trabajo
            9. FREE_RESOURCES - Solicitud de recursos gratuitos, gu√≠as, templates, prompts
            10. GENERAL_QUESTION - Pregunta general sobre IA/tecnolog√≠a

            MENSAJE ACTUAL: {user_message}

            CONTEXTO DEL USUARIO:
            - Profesi√≥n actual: {user_memory.role if user_memory.role else 'No especificada'}
            - Intereses conocidos: {', '.join(user_memory.interests if user_memory.interests else [])}
            - Puntos de dolor: {', '.join(user_memory.pain_points if user_memory.pain_points else [])}
            - Mensajes recientes: {recent_messages}
            {automation_info}

            IMPORTANTE: 
            - Si ya tienes informaci√≥n suficiente del usuario, NO pidas m√°s detalles
            - Si el usuario cambi√≥ de profesi√≥n, actualiza y conecta con el curso
            - Si menciona automatizaci√≥n, conecta directamente con beneficios del curso
            - Si muestra objeciones, activa herramientas de ventas

            Responde SOLO con JSON:
            {{
                "category": "CATEGORIA_PRINCIPAL",
                "confidence": 0.8,
                "should_ask_more": false,
                "recommended_tools": {{
                    "show_bonuses": false,
                    "show_demo": false,
                    "show_resources": false,
                    "show_testimonials": false
                }},
                "sales_strategy": "direct_benefit|explore_need|handle_objection|close_sale",
                "key_topics": [],
                "response_focus": "Qu√© debe enfocar la respuesta"
            }}
            """

            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": intent_prompt}],
                max_tokens=300,
                temperature=0.1
            )

            content = response.choices[0].message.content
            if not content:
                return self._get_default_intent()

            intent_analysis = self._safe_json_parse(content)
            if not intent_analysis:
                return self._get_default_intent()

            return intent_analysis

        except Exception as e:
            logger.error(f"Error analizando intenci√≥n: {e}")
            return self._get_default_intent()

    def _get_default_intent(self) -> Dict[str, Any]:
        """Retorna un an√°lisis de intenci√≥n por defecto"""
        return {
            "category": "GENERAL_QUESTION",
            "confidence": 0.5,
            "should_ask_more": False,
            "recommended_tools": {
                "show_bonuses": False,
                "show_demo": False,
                "show_resources": False,
                "show_testimonials": False
            },
            "sales_strategy": "direct_benefit",
            "key_topics": [],
            "response_focus": "Responder directamente y mostrar beneficios"
        }

    def _detect_objection_type(self, message: str) -> str:
        """Detecta el tipo de objeci√≥n en el mensaje del usuario."""
        message_lower = message.lower()
        
        objection_patterns = {
            'price': ['caro', 'costoso', 'precio', 'dinero', 'presupuesto', 'barato', 'econ√≥mico'],
            'time': ['tiempo', 'ocupado', 'horario', 'disponible', 'r√°pido', 'lento', 'duraci√≥n'],
            'trust': ['confianza', 'seguro', 'garant√≠a', 'estafa', 'real', 'verdad', 'experiencia'],
            'value': ['necesito', '√∫til', 'sirve', 'funciona', 'beneficio', 'resultado', 'vale la pena'],
            'decision': ['pensarlo', 'decidir', 'consultar', 'despu√©s', 'm√°s tarde', 'ma√±ana']
        }
        
        objection_scores = {}
        for objection_type, keywords in objection_patterns.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > 0:
                objection_scores[objection_type] = score
        
        if objection_scores:
            return max(objection_scores.keys(), key=lambda x: objection_scores[x])
        else:
            return 'general'

    def _detect_buying_signals(self, message: str) -> List[str]:
        """Detecta se√±ales de compra en el mensaje del usuario."""
        buying_signals = []
        message_lower = message.lower()
        
        signal_patterns = {
            'ready_to_buy': ['comprar', 'adquirir', 'inscribir', 'registrar'],
            'payment_interest': ['pagar', 'precio', 'costo', 'tarjeta', 'transferencia'],
            'timing_questions': ['cuando', 'inicio', 'empezar', 'comenzar'],
            'urgency': ['ya', 'ahora', 'inmediato', 'r√°pido', 'urgente'],
            'value_accepted': ['perfecto', 'excelente', 'me gusta', 'interesante']
        }
        
        for signal_type, keywords in signal_patterns.items():
            if any(keyword in message_lower for keyword in keywords):
                buying_signals.append(signal_type)
        
        return buying_signals

    def _calculate_interest_score(self, message: str, user_memory: LeadMemory) -> int:
        """Calcula una puntuaci√≥n de inter√©s basada en el mensaje y historial."""
        score = 50  # Base score
        
        # Analizar mensaje actual
        buying_signals = self._detect_buying_signals(message)
        score += len(buying_signals) * 10
        
        # Analizar historial
        if user_memory.message_history:
            score += min(len(user_memory.message_history) * 5, 30)
            
            # Buscar progresi√≥n de inter√©s
            recent_messages = user_memory.message_history[-3:] if len(user_memory.message_history) >= 3 else user_memory.message_history
            for msg in recent_messages:
                if any(word in msg.get('content', '').lower() for word in ['precio', 'pago', 'inscribir']):
                    score += 15
        
        # Normalizar entre 0-100
        return min(max(score, 0), 100)

    async def _get_course_info_from_db(self, course_id: str) -> Optional[Dict]:
        """Obtiene informaci√≥n real del curso desde la base de datos."""
        try:
            if not course_id:
                return None
            
            logger.info(f"üîç _get_course_info_from_db iniciado para curso: {course_id}")
            
            # Usar CourseService para obtener informaci√≥n b√°sica primero
            course_info = await self.course_service.getCourseBasicInfo(course_id)
            if not course_info:
                logger.warning(f"No se encontr√≥ informaci√≥n b√°sica del curso {course_id}")
                return None
                
            logger.info(f"‚úÖ Informaci√≥n b√°sica obtenida: {course_info.get('name', 'Sin nombre')}")
                
            # Obtener informaci√≥n detallada si la b√°sica existe
            course_details = await self.course_service.getCourseDetails(course_id)
            if course_details:
                # Combinar informaci√≥n b√°sica con detalles
                course_info.update(course_details)
                logger.info(f"‚úÖ Detalles del curso combinados")
                
                # Obtener m√≥dulos/sesiones por separado para asegurar compatibilidad
                modules_sessions = await self.course_service.getCourseModules(course_id)
                logger.info(f"üìã getCourseModules retorn√≥ {len(modules_sessions) if modules_sessions else 0} elementos")
                
                if modules_sessions:
                    # Detectar estructura basado en los campos presentes
                    first_item = modules_sessions[0] if modules_sessions else {}
                    logger.info(f"üîç Primer elemento para detectar estructura: {first_item}")
                    
                    # Si tiene 'name' y 'description' -> estructura antigua (modules)
                    # Si tiene 'title' y 'objective' -> nueva estructura (sessions)
                    if 'name' in first_item and 'description' in first_item:
                        # Estructura actual: modules
                        course_info['modules'] = modules_sessions
                        logger.info(f"‚úÖ Detectada estructura ANTIGUA - {len(modules_sessions)} m√≥dulos agregados a course_info")
                        logger.info(f"üìñ Nombres de m√≥dulos: {[m.get('name') for m in modules_sessions]}")
                    elif 'title' in first_item and 'objective' in first_item:
                        # Nueva estructura: sessions - mapear a format compatible
                        sessions_mapped = []
                        for session in modules_sessions:
                            mapped_session = {
                                'id': session.get('id'),
                                'name': session.get('name'),  # Ya mapeado en CourseService
                                'description': session.get('description'),  # Ya mapeado en CourseService
                                'duration': session.get('duration'),
                                'module_index': session.get('module_index'),
                                # Mantener tambi√©n los campos originales para compatibilidad
                                'title': session.get('name'),
                                'objective': session.get('description'),
                                'duration_minutes': session.get('duration'),
                                'session_index': session.get('module_index')
                            }
                            sessions_mapped.append(mapped_session)
                        
                        # Agregar tanto como 'sessions' (nueva) como 'modules' (compatibilidad)
                        course_info['sessions'] = sessions_mapped
                        course_info['modules'] = sessions_mapped  # Para compatibilidad con validaci√≥n
                        logger.info(f"‚úÖ Detectada estructura NUEVA - {len(sessions_mapped)} sesiones mapeadas")
                        logger.info(f"üìñ Nombres de sesiones: {[s.get('name') for s in sessions_mapped]}")
                        logger.info(f"üîó course_info ahora tiene 'modules' y 'sessions' para compatibilidad")
                        
                        # Calcular duraci√≥n total en minutos
                        total_duration = sum(session.get('duration', 0) for session in sessions_mapped)
                        course_info['total_duration_min'] = total_duration
                        
                        # Obtener pr√°cticas por sesi√≥n (solo nueva estructura)
                        for session in sessions_mapped:
                            session_id = session.get('id')
                            if session_id:
                                practices = await self.course_service.getModuleExercises(session_id)
                                if practices:
                                    session['practices'] = practices
                        
                        # Obtener entregables por sesi√≥n (solo nueva estructura)
                        for session in sessions_mapped:
                            session_id = session.get('id')
                            if session_id:
                                deliverables = await self.course_service.getSessionDeliverables(session_id)
                                if deliverables:
                                    session['deliverables'] = deliverables
                    else:
                        logger.warning(f"‚ö†Ô∏è No se pudo detectar estructura de m√≥dulos/sesiones para curso {course_id}")
                        course_info['modules'] = modules_sessions  # Fallback
                else:
                    logger.warning(f"‚ùå NO se obtuvieron m√≥dulos/sesiones de getCourseModules para curso {course_id}")
                
                # Obtener bonos disponibles (funciona en ambas estructuras)
                bonuses = await self.course_service.getAvailableBonuses(course_id)
                if bonuses:
                    course_info['bonuses'] = bonuses
                    
                # Obtener subtema del curso (solo nueva estructura)
                subtheme = await self.course_service.getCourseSubtheme(course_id)
                if subtheme:
                    course_info['subtheme'] = subtheme
                    
                # Obtener recursos gratuitos (funciona en ambas estructuras)
                free_resources = await self.course_service.getFreeResources(course_id)
                if free_resources:
                    course_info['free_resources'] = free_resources
            
            # LOG FINAL del course_info que se va a retornar
            logger.info(f"üìä COURSE_INFO FINAL para validaci√≥n:")
            logger.info(f"üóÇÔ∏è Keys en course_info: {list(course_info.keys())}")
            logger.info(f"üìö M√≥dulos en course_info: {len(course_info.get('modules', []))}")
            logger.info(f"üìö Sesiones en course_info: {len(course_info.get('sessions', []))}")
            
            return course_info
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo informaci√≥n del curso {course_id}: {e}")
            return None
    
    async def _validate_course_content_mention(self, response_text: str, course_info: Dict) -> bool:
        """Valida que no se mencione contenido inventado del curso."""
        try:
            if not course_info:
                logger.warning("üö´ No hay course_info para validar")
                return True
                
            # Lista de palabras que indican contenido espec√≠fico del curso
            content_indicators = [
                'm√≥dulo', 'm√≥dulos', 'cap√≠tulo', 'cap√≠tulos', 'lecci√≥n', 'lecciones',
                'temario', 'contenido', 'syllabus', 'programa', 'plan de estudios',
                'sesi√≥n', 'sesiones', 'pr√°ctica', 'pr√°cticas', 'entregable', 'entregables'
            ]
            
            response_lower = response_text.lower()
            mentions_content = any(indicator in response_lower for indicator in content_indicators)
            
            # üîç LOGGING DETALLADO PARA DEBUG
            logger.info(f"üîç VALIDANDO RESPUESTA:")
            logger.info(f"üìù Respuesta generada: {response_text}")
            logger.info(f"üéØ Menciona contenido espec√≠fico: {mentions_content}")
            
            if not mentions_content:
                logger.info("‚úÖ Respuesta NO menciona contenido espec√≠fico - APROBADA")
                return True  # No menciona contenido espec√≠fico, est√° bien
                
            # Verificar si tenemos m√≥dulos/sesiones reales (estructura h√≠brida)
            real_modules = course_info.get('modules', [])
            real_sessions = course_info.get('sessions', [])
            
            logger.info(f"üóÇÔ∏è M√≥dulos en course_info: {len(real_modules)} - {[m.get('name', 'Sin nombre') for m in real_modules[:3]]}")
            logger.info(f"üóÇÔ∏è Sesiones en course_info: {len(real_sessions)} - {[s.get('title', s.get('name', 'Sin nombre')) for s in real_sessions[:3]]}")
            
            # Si tenemos cualquiera de las dos estructuras, validar
            if real_modules:
                # Estructura actual - validar m√≥dulos
                logger.info(f"üìö Validando contra {len(real_modules)} m√≥dulos reales")
                for i, module in enumerate(real_modules[:3]):  # Solo primeros 3 para logging
                    logger.info(f"üìñ M√≥dulo {i+1}: {module}")
                    if not all(key in module for key in ['name', 'description']):
                        logger.warning(f"‚ùå M√≥dulo {module.get('id')} no tiene toda la informaci√≥n requerida")
                        return False
                logger.info(f"‚úÖ Validaci√≥n exitosa: curso tiene {len(real_modules)} m√≥dulos reales")
                return True
                
            elif real_sessions:
                # Nueva estructura - validar sesiones
                logger.info(f"üìö Validando contra {len(real_sessions)} sesiones reales")
                for i, session in enumerate(real_sessions[:3]):  # Solo primeros 3 para logging
                    logger.info(f"üìñ Sesi√≥n {i+1}: {session}")
                    if not all(key in session for key in ['title', 'objective', 'duration_minutes']):
                        logger.warning(f"‚ùå Sesi√≥n {session.get('id')} no tiene toda la informaci√≥n requerida")
                        return False
                        
                # Si menciona pr√°cticas, verificar que existan
                if 'pr√°ctica' in response_lower or 'pr√°cticas' in response_lower:
                    has_practices = any(
                        session.get('practices', []) 
                        for session in real_sessions
                    )
                    if not has_practices:
                        logger.warning("‚ùå Respuesta menciona pr√°cticas pero no hay pr√°cticas en BD")
                        return False
                        
                # Si menciona entregables, verificar que existan
                if 'entregable' in response_lower or 'entregables' in response_lower:
                    has_deliverables = any(
                        session.get('deliverables', []) 
                        for session in real_sessions
                    )
                    if not has_deliverables:
                        logger.warning("‚ùå Respuesta menciona entregables pero no hay entregables en BD")
                        return False
                        
                logger.info(f"‚úÖ Validaci√≥n exitosa: curso tiene {len(real_sessions)} sesiones reales")
                return True
            else:
                # No hay m√≥dulos ni sesiones - permitir solo si es informaci√≥n general
                logger.warning(f"‚ùå NO HAY m√≥dulos ni sesiones en course_info")
                logger.warning(f"üîç Keys disponibles en course_info: {list(course_info.keys())}")
                if any(word in response_lower for word in ['m√≥dulo', 'm√≥dulos', 'lecci√≥n', 'lecciones', 'temario', 'syllabus']):
                    logger.warning("‚ùå Respuesta menciona contenido espec√≠fico pero no hay m√≥dulos/sesiones reales en BD")
                    return False
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error validando contenido del curso: {e}")
            return True  # En caso de error, permitir la respuesta

    async def generate_response(self, user_message: str, user_memory: LeadMemory, course_info: Optional[Dict]) -> Union[str, List[Dict[str, str]]]:
        """Genera una respuesta personalizada usando an√°lisis conversacional inteligente"""
        if self.client is None:
            return "Lo siento, hay un problema con el sistema. Por favor intenta m√°s tarde."
        
        try:
            # üß† PASO 1: An√°lisis conversacional inteligente
            logger.info(f"üß† Analizando conversaci√≥n para usuario {user_memory.user_id}")
            conversation_analysis = await self.conversation_processor.analyze_and_learn(
                user_memory.user_id, 
                user_message, 
                user_memory.selected_course
            )
            
            # üìö PASO 2: Obtener informaci√≥n del curso si es necesario
            if user_memory.selected_course and course_info is None:
                logger.info(f"üìö Obteniendo informaci√≥n del curso: {user_memory.selected_course}")
                course_info = await self._get_course_info_from_db(user_memory.selected_course)
                if not course_info:
                    logger.warning(f"‚ö†Ô∏è No se pudo obtener informaci√≥n del curso {user_memory.selected_course}")
                    # Crear informaci√≥n m√≠nima para continuar
                    course_info = {
                        'id': user_memory.selected_course,
                        'name': 'Curso de IA para Profesionales',
                        'short_description': 'Curso especializado en Inteligencia Artificial',
                        'price': '199',
                        'currency': 'USD',
                        'level': 'b√°sico',
                        'sessions': []
                    }
            
            # üéØ PASO 3: Generar contexto personalizado
            personalized_context = await self.conversation_processor.generate_personalized_context(
                user_memory.user_id, 
                user_memory.selected_course
            )
            
            # üõ†Ô∏è PASO 4: Detectar herramientas necesarias seg√∫n an√°lisis
            tools_to_use = []
            response_focus = conversation_analysis.get("next_conversation_focus", "general")
            suggested_tools = conversation_analysis.get("suggested_tools", [])
            
            # Mapear herramientas seg√∫n el an√°lisis inteligente
            if "free_resources" in suggested_tools or "FREE_RESOURCES" in conversation_analysis.get("user_profile", {}).get("intent_category", ""):
                tools_to_use.append("enviar_recursos_gratuitos")
            
            if "syllabus" in suggested_tools or any(word in user_message.lower() for word in ["temario", "contenido", "que voy a aprender"]):
                tools_to_use.append("mostrar_syllabus_interactivo")
            
            if "price_comparison" in suggested_tools or conversation_analysis.get("user_profile", {}).get("intent_category") == "OBJECTION_PRICE":
                tools_to_use.append("mostrar_comparativa_precios")
            
            if "advisor_contact" in suggested_tools or any(word in user_message.lower() for word in ["asesor", "hablar", "contactar"]):
                tools_to_use.append("contactar_asesor_directo")
            
            # üí¨ PASO 5: Generar respuesta personalizada
            logger.info(f"üí¨ Generando respuesta personalizada para {user_memory.name or 'Usuario'}")
            response = await self._generate_intelligent_response(
                user_message,
                user_memory,
                course_info,
                conversation_analysis,
                personalized_context,
                tools_to_use
            )
            
            # üìù PASO 6: Actualizar memoria con nueva informaci√≥n
            if user_memory.tools_used is None:
                user_memory.tools_used = []
            user_memory.tools_used.extend(tools_to_use)
            
            # Actualizar puntuaci√≥n basada en an√°lisis inteligente
            engagement_level = conversation_analysis.get("user_profile", {}).get("engagement_level", "medium")
            if engagement_level == "very_high":
                user_memory.lead_score = min(100, user_memory.lead_score + 15)
            elif engagement_level == "high":
                user_memory.lead_score = min(100, user_memory.lead_score + 10)
            elif engagement_level == "low":
                user_memory.lead_score = max(0, user_memory.lead_score - 5)
            
            user_memory.interaction_count += 1
            
            return response
        
        except Exception as e:
            logger.error(f"‚ùå Error generando respuesta inteligente: {e}")
            return "Lo siento, hubo un error procesando tu mensaje. ¬øPodr√≠as repetir tu pregunta?"

    async def _generate_intelligent_response(
        self,
        user_message: str,
        user_memory: LeadMemory,
        course_info: Optional[Dict],
        conversation_analysis: Dict[str, Any],
        personalized_context: str,
        tools_to_use: List[str]
    ) -> Union[str, List[Dict[str, str]]]:
        """
        Genera respuesta completamente personalizada usando an√°lisis conversacional
        """
        try:
            # Construir historial de conversaci√≥n
            conversation_history = []
            if user_memory.message_history:
                recent_messages = user_memory.message_history[-8:]  # √öltimos 4 intercambios
                for msg in recent_messages:
                    conversation_history.append({
                        "role": msg.get('role', 'user'),
                        "content": msg.get('content', '')
                    })
            
            # Obtener an√°lisis del usuario
            user_profile = conversation_analysis.get("user_profile", {})
            engagement_level = user_profile.get("engagement_level", "medium")
            response_style = user_profile.get("response_style", "friendly")
            intent_category = user_profile.get("intent_category", "exploration")
            
            # Construir prompt personalizado
            personalized_prompt = f"""
{self.system_prompt}

## CONTEXTO PERSONALIZADO DEL USUARIO:
{personalized_context}

## AN√ÅLISIS CONVERSACIONAL ACTUAL:
- Nivel de engagement: {engagement_level}
- Estilo de respuesta recomendado: {response_style}
- Categor√≠a de intenci√≥n: {intent_category}
- Sentiment: {user_profile.get('sentiment', 'neutral')}
- Enfoque siguiente: {conversation_analysis.get('next_conversation_focus', 'general')}

## HERRAMIENTAS A USAR:
{', '.join(tools_to_use) if tools_to_use else 'Solo respuesta conversacional'}

## INFORMACI√ìN DEL CURSO:
- Nombre: {course_info.get('name', 'N/A') if course_info else 'N/A'}
- Descripci√≥n: {course_info.get('short_description', 'N/A') if course_info else 'N/A'}
- Precio: {course_info.get('price', 'N/A')} {course_info.get('currency', 'USD') if course_info else 'N/A'}
- Nivel: {course_info.get('level', 'N/A') if course_info else 'N/A'}

## INSTRUCCIONES ESPEC√çFICAS:
1. PERSONALIZA la respuesta bas√°ndote en el contexto del usuario
2. USA el estilo de comunicaci√≥n recomendado: {response_style}
3. Si hay herramientas sugeridas, menci√≥nalas naturalmente
4. NO repitas informaci√≥n que ya conoces del usuario
5. Mant√©n el engagement al nivel: {engagement_level}
6. ENF√ìCATE en: {conversation_analysis.get('next_conversation_focus', 'general')}

MENSAJE DEL USUARIO: "{user_message}"

Responde de manera completamente personalizada y estrat√©gica:
"""

            # Preparar mensajes para OpenAI
            messages = [{"role": "system", "content": personalized_prompt}]
            messages.extend(conversation_history[-6:])  # √öltimos mensajes para contexto
            messages.append({"role": "user", "content": user_message})
            
            # Generar respuesta con OpenAI
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=800,
                temperature=0.7,
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            ai_response = response.choices[0].message.content
            if not ai_response:
                return "Lo siento, no pude generar una respuesta. ¬øPodr√≠as reformular tu pregunta?"
            
            # Guardar respuesta en historial
            if user_memory.message_history is None:
                user_memory.message_history = []
            
            user_memory.message_history.append({
                'role': 'assistant',
                'content': ai_response,
                'timestamp': datetime.utcnow().isoformat(),
                'tools_used': tools_to_use,
                'analysis': conversation_analysis
            })
            
            # Si hay herramientas a usar, ejecutarlas
            if tools_to_use and self.agent_tools:
                return await self._execute_tools_with_response(
                    ai_response, 
                    tools_to_use, 
                    user_memory.user_id, 
                    user_memory.selected_course
                )
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå Error en _generate_intelligent_response: {e}")
            return "Lo siento, hubo un error. ¬øPodr√≠as repetir tu pregunta?"

    async def _execute_tools_with_response(
        self,
        ai_response: str,
        tools_to_use: List[str],
        user_id: str,
        course_id: str
    ) -> List[Dict[str, str]]:
        """
        Ejecuta herramientas y combina con respuesta IA
        """
        response_items = [{"type": "text", "content": ai_response}]
        
        for tool_name in tools_to_use:
            try:
                if hasattr(self.agent_tools, tool_name):
                    tool_method = getattr(self.agent_tools, tool_name)
                    tool_result = await tool_method(user_id, course_id)
                    
                    if isinstance(tool_result, dict):
                        if tool_result.get("type") == "multimedia" and tool_result.get("resources"):
                            response_items.extend(tool_result["resources"])
                        elif tool_result.get("type") == "text":
                            response_items.append({
                                "type": "text",
                                "content": tool_result.get("content", "")
                            })
                        elif tool_result.get("resources"):
                            response_items.extend(tool_result["resources"])
                            
                    logger.info(f"‚úÖ Herramienta {tool_name} ejecutada exitosamente")
                    
            except Exception as e:
                logger.error(f"‚ùå Error ejecutando herramienta {tool_name}: {e}")
        
        return response_items
            if course_info:
                course_context = f"""
## ‚ö†Ô∏è INFORMACI√ìN REAL DEL CURSO (√öNICA FUENTE AUTORIZADA):
- Nombre EXACTO: {course_info.get('name', 'No disponible')}
- Descripci√≥n corta: {course_info.get('short_description', 'No disponible')}
- Descripci√≥n completa: {course_info.get('long_description', 'No disponible')}
- Duraci√≥n total: {course_info.get('total_duration', 'No disponible')}
- Precio (USD): {course_info.get('price_usd', 'No disponible')}
- Nivel: {course_info.get('level', 'No disponible')}
- Categor√≠a: {course_info.get('category', 'No disponible')}
- Herramientas usadas: {', '.join(str(t) for t in (course_info.get('tools_used') or ['No disponible']))}
- Prerrequisitos: {', '.join(str(p) for p in (course_info.get('prerequisites') or ['No disponible']))}
- Requerimientos: {', '.join(str(r) for r in (course_info.get('requirements') or ['No disponible']))}
- Horario: {course_info.get('schedule', 'No disponible')}

‚ö†Ô∏è REGLA CR√çTICA: Solo usa la informaci√≥n de arriba. NO menciones m√≥dulos espec√≠ficos a menos que est√©n listados abajo.
"""
                system_message += "\n" + course_context
                
                # Agregar informaci√≥n de m√≥dulos si est√° disponible
                if course_info.get('id'):
                    # Obtener m√≥dulos del curso
                    modules = await self.course_service.getCourseModules(course_info['id'])
                    if modules:
                        modules_info = "\n## M√≥dulos del Curso:\n"
                        for module in modules:
                            if module:  # Verificar que el m√≥dulo no sea None
                                modules_info += f"- M√≥dulo {module.get('module_index', '?')}: {module.get('name', 'Sin nombre')}\n"
                                if module.get('description'):
                                    modules_info += f"  Descripci√≥n: {module.get('description')}\n"
                                if module.get('duration'):
                                    modules_info += f"  Duraci√≥n: {module.get('duration')}\n"
                        system_message += "\n" + modules_info
                    
                    # Obtener bonos disponibles
                    bonuses = await self.course_service.getAvailableBonuses(course_info['id'])
                    if bonuses:
                        bonuses_info = "\n## Bonos por Tiempo Limitado:\n"
                        for bonus in bonuses:
                            if bonus and bonus.get('active'):  # Solo bonos activos
                                bonuses_info += f"""
- {bonus.get('name', 'Sin nombre')}:
  Descripci√≥n: {bonus.get('description', 'No disponible')}
  Valor: ${bonus.get('original_value', '0')} USD
  Propuesta: {bonus.get('value_proposition', 'No disponible')}
  Expira: {bonus.get('expires_at', 'No disponible')}
  Cupos: {bonus.get('max_claims', '0')} totales, {bonus.get('current_claims', '0')} reclamados
"""
                        system_message += "\n" + bonuses_info
            
            # Agregar informaci√≥n del usuario
            user_context = f"""
## Informaci√≥n del Usuario:
- Nombre: {user_memory.name if user_memory.name else 'No disponible'}
- Profesi√≥n: {user_memory.role if user_memory.role else 'No disponible'}
- Intereses: {', '.join(user_memory.interests) if user_memory.interests else 'No disponible'}
- Puntos de dolor: {', '.join(user_memory.pain_points) if user_memory.pain_points else 'No disponible'}
- Nivel de inter√©s: {user_memory.interest_level if user_memory.interest_level else 'No disponible'}
"""
            system_message += "\n" + user_context
            
            # Crear mensajes para la API
            messages: List[ChatCompletionMessageParam] = [
                {"role": "system", "content": system_message}
            ]
            
            # Agregar historial de conversaci√≥n
            for msg in conversation_history:
                messages.append(cast(ChatCompletionMessageParam, msg))
            
            # Agregar mensaje actual del usuario
            messages.append({"role": "user", "content": user_message})
            
            # Llamar a la API de OpenAI
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",  # Corregir nombre del modelo
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )
            
            # Obtener la respuesta
            response_text = response.choices[0].message.content
            if not response_text:
                return "Lo siento, no pude generar una respuesta."
            
            # CR√çTICO: Validar que no se invent√≥ contenido del curso
            if course_info:
                # Validar respuesta para prevenir contenido inventado
                is_valid = await self._validate_course_content_mention(response_text, course_info)
                
                if not is_valid:
                    logger.warning(f"‚ùå RESPUESTA DE LA IA RECHAZADA POR CONTENIDO INVENTADO:")
                    logger.warning(f"üìù Respuesta completa: {response_text}")
                    logger.warning(f"üéØ Curso ID: {user_memory.selected_course}")
                    logger.warning(f"üìö Course_info keys: {list(course_info.keys()) if course_info else 'None'}")
                    logger.warning(f"Respuesta menciona contenido inventado para curso {user_memory.selected_course}")
                    
                    # Usar respuesta gen√©rica en lugar de contenido potencialmente inventado
                    response_text = "Perfecto, me da mucho gusto que est√©s interesado en el curso. D√©jame consultar la informaci√≥n espec√≠fica del contenido para darte detalles precisos. ¬øHay algo particular que te gustar√≠a saber sobre el curso?"
                else:
                    logger.info(f"‚úÖ RESPUESTA DE LA IA APROBADA:")
                    logger.info(f"üìù Respuesta: {response_text[:200]}...")  # Solo primeros 200 caracteres
                
                # Validar respuesta con datos COMPLETOS de BD (incluir TODO)
                bonuses = course_info.get('bonuses', [])
                if not bonuses:
                    bonuses = await self.course_service.getAvailableBonuses(course_info['id'])
                
                # Obtener recursos gratuitos para el validador
                free_resources = course_info.get('free_resources', [])
                if not free_resources:
                    free_resources = await self.course_service.getFreeResources(course_info['id'])
                
                # Enriquecer course_data con TODA la informaci√≥n disponible
                complete_course_data = course_info.copy()
                complete_course_data['bonuses'] = bonuses
                complete_course_data['free_resources'] = free_resources
                
                # Agregar informaci√≥n de la base de datos para el validador
                logger.info(f"üîç Enviando al validador course_data con {len(complete_course_data.keys())} claves")
                logger.info(f"üìä Keys disponibles: {list(complete_course_data.keys())}")
                
                # Validar respuesta incluyendo TODOS los datos disponibles
                validation = await self.prompt_service.validate_response(
                    response=response_text,
                    course_data=complete_course_data,
                    bonuses_data=bonuses,
                    all_courses_data=None  # Se puede expandir para incluir otros cursos si es necesario
                )
                
                logger.info(f"üîç Validador ejecutado - Resultado: {validation.get('is_valid', True)}")
                if validation.get('warnings'):
                    logger.info(f"‚ö†Ô∏è Warnings del validador: {validation.get('warnings')}")
                if validation.get('errors'):
                    logger.warning(f"‚ùå Errores del validador: {validation.get('errors')}")
                
                if not validation.get('is_valid', True):
                    errors = validation.get('errors', [])
                    logger.warning(f"Respuesta inv√°lida para usuario {user_memory.user_id}: {', '.join(errors)}")
                    
                    # Si la respuesta es inv√°lida, devolver respuesta segura
                    return "Te entiendo perfectamente. D√©jame obtener la informaci√≥n m√°s actualizada sobre el curso para responderte con precisi√≥n. ¬øQu√© aspecto espec√≠fico te interesa m√°s?"
            
            # REDISE√ëADO: Activar herramientas ANTES de procesar la respuesta para incorporar contenido
            tool_contents = await self._activate_tools_based_on_intent(
                intent_analysis, user_memory, course_info, user_message
            )
            
            # Procesar contenido de herramientas
            tools_content_text = ""
            if tool_contents:
                from core.agents.intelligent_sales_agent_tools import IntelligentSalesAgentTools
                tools_handler = IntelligentSalesAgentTools(self.agent_tools)
                tools_content_text = tools_handler.format_tool_content_for_agent(tool_contents)
                
                # Si se activ√≥ contacto con asesor, retornar directamente
                if any(content.get('type') == 'contact_flow_activated' for content in tool_contents):
                    logger.info(f"üîÑ Flujo de contacto activado, agente se desactiva temporalmente")
                    return tools_content_text
                
                # NUEVO: Si se activaron herramientas espec√≠ficas que deben reemplazar la respuesta de GPT
                tools_that_replace_response = ['mostrar_bonos_exclusivos', 'enviar_recursos_gratuitos', 
                                              'mostrar_syllabus_interactivo', 'enviar_preview_curso']
                
                # Verificar si alguna herramienta de reemplazo se activ√≥ revisando el tipo de contenido
                replace_gpt_response = False
                detected_keywords = [
                    'bonos exclusivos', 'bonos incluidos', 'plantilla de calendario', 'valor total de bonos',
                    'recursos gratuitos', 'syllabus', 'preview', 'temario completo'
                ]
                
                for content in tool_contents:
                    if content.get('type') == 'text':
                        content_text = content.get('content', '').lower()
                        for keyword in detected_keywords:
                            if keyword in content_text:
                                replace_gpt_response = True
                                logger.info(f"üîß Detectado contenido de herramienta espec√≠fica: '{keyword}' - activando reemplazo")
                                break
                        if replace_gpt_response:
                            break
                
                if replace_gpt_response:
                    logger.info(f"üîÑ Herramientas de contenido espec√≠fico activadas - usando solo contenido de herramientas")
                    # Usar SOLO el contenido crudo de las herramientas, sin headers ni respuesta de GPT
                    raw_tools_content = tools_handler.extract_raw_tool_content(tool_contents)
                    
                    if raw_tools_content and raw_tools_content.strip():
                        final_response = await self._process_response_with_tools(raw_tools_content, user_memory, tool_contents)
                        return final_response
                    else:
                        logger.warning(f"‚ö†Ô∏è Contenido de herramientas vac√≠o, usando respuesta de GPT como fallback")
                        # Fallback: usar respuesta de GPT si las herramientas no tienen contenido
                
                logger.info(f"‚úÖ Contenido de herramientas procesado para incorporar en respuesta")
            
            # Incorporar contenido de herramientas en la respuesta del agente si existe
            if tools_content_text:
                # Combinar la respuesta del agente con el contenido de las herramientas
                combined_response = response_text + "\n\n" + tools_content_text
                final_response = await self._process_response_with_tools(combined_response, user_memory, tool_contents)
            else:
                # Procesar respuesta normal sin herramientas
                final_response = await self._process_response(response_text, user_memory)
            
            return final_response
                
        except Exception as e:
            logger.error(f"Error generando respuesta: {e}", exc_info=True)
            return "Lo siento, ocurri√≥ un error al procesar tu mensaje. Por favor intenta nuevamente."
    
    def _safe_json_parse(self, content: str) -> Optional[Dict]:
        """
        Parsea JSON de forma segura, limpiando el contenido si es necesario.
        """
        if not content:
            return None
            
        try:
            # Limpiar el contenido
            content = content.strip()
            
            # Remover markdown si existe
            if content.startswith("```json"):
                content = content[7:]
            if content.startswith("```"):
                content = content[3:]
            if content.endswith("```"):
                content = content[:-3]
            
            # Intentar parsear directamente
            return json.loads(content)
            
        except json.JSONDecodeError:
            try:
                # Buscar JSON dentro del texto
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
            except:
                pass
                
        except Exception:
            pass
            
        return None

    async def _extract_user_info(self, user_message: str, user_memory: LeadMemory):
        """Extrae informaci√≥n relevante del mensaje del usuario"""
        if not self.client:
            return
            
        try:
            extraction_prompt = f"""
            Analiza el siguiente mensaje del usuario para extraer informaci√≥n relevante sobre sus necesidades, intereses y puntos de dolor.
            Presta especial atenci√≥n a menciones sobre:
            - Automatizaci√≥n de procesos o reportes
            - Tipos espec√≠ficos de reportes o documentos
            - Frecuencia de tareas manuales
            - Tiempo invertido en tareas
            - Herramientas o software actual
            - Frustraciones o problemas espec√≠ficos

            MENSAJE DEL USUARIO:
            {user_message}

            CONTEXTO ACTUAL:
            - Profesi√≥n: {user_memory.role if user_memory.role else 'No disponible'}
            - Intereses conocidos: {', '.join(user_memory.interests if user_memory.interests else [])}
            - Puntos de dolor conocidos: {', '.join(user_memory.pain_points if user_memory.pain_points else [])}

            Devuelve un JSON con el siguiente formato:
            {{
                "role": "profesi√≥n o rol detectado",
                "interests": ["lista", "de", "intereses"],
                "pain_points": ["lista", "de", "problemas"],
                "automation_needs": {{
                    "report_types": ["tipos", "de", "reportes"],
                    "frequency": "frecuencia de tareas",
                    "time_investment": "tiempo invertido",
                    "current_tools": ["herramientas", "actuales"],
                    "specific_frustrations": ["frustraciones", "espec√≠ficas"]
                }}
            }}
            """

            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",  # Corregir nombre del modelo
                messages=[{"role": "user", "content": extraction_prompt}],
                max_tokens=500,
                temperature=0.1
            )

            content = response.choices[0].message.content
            if not content:
                return

            extracted_info = self._safe_json_parse(content)
            if not extracted_info:
                return

            # Actualizar informaci√≥n del usuario
            if extracted_info.get('role'):
                user_memory.role = extracted_info['role']

            # Actualizar intereses
            if extracted_info.get('interests'):
                if user_memory.interests is None:
                    user_memory.interests = []
                user_memory.interests.extend(extracted_info['interests'])
                user_memory.interests = list(set(user_memory.interests))

            # Actualizar puntos de dolor
            if extracted_info.get('pain_points'):
                if user_memory.pain_points is None:
                    user_memory.pain_points = []
                user_memory.pain_points.extend(extracted_info['pain_points'])
                user_memory.pain_points = list(set(user_memory.pain_points))

            # Guardar informaci√≥n de automatizaci√≥n
            automation_needs = extracted_info.get('automation_needs', {})
            if automation_needs:
                if user_memory.automation_needs is None:
                    user_memory.automation_needs = {
                        "report_types": [],
                        "frequency": "",
                        "time_investment": "",
                        "current_tools": [],
                        "specific_frustrations": []
                    }
                user_memory.automation_needs.update(automation_needs)

        except Exception as e:
            logger.error(f"Error extrayendo informaci√≥n del usuario: {e}")

    async def _process_response(self, response_text: str, user_memory: LeadMemory) -> Union[str, List[Dict[str, str]]]:
        """Procesa la respuesta del LLM y actualiza historial de conversaci√≥n"""
        
        # CR√çTICO: Actualizar historial de conversaci√≥n
        if user_memory.message_history is None:
            user_memory.message_history = []
        
        # Agregar la respuesta del bot al historial
        user_memory.message_history.append({
            'role': 'assistant',
            'content': response_text,
            'timestamp': datetime.utcnow().isoformat()
        })
        
        # Limitar historial a los √∫ltimos 20 mensajes para evitar sobrecarga
        if len(user_memory.message_history) > 20:
            user_memory.message_history = user_memory.message_history[-20:]
        
        # Actualizar timestamp de √∫ltima interacci√≥n
        user_memory.last_interaction = datetime.utcnow()
        user_memory.updated_at = datetime.utcnow()
        
        # Verificar si la respuesta contiene m√∫ltiples mensajes
        if "[MENSAJE_" in response_text:
            # Dividir por mensajes
            import re
            message_parts = re.split(r'\[MENSAJE_\d+\]', response_text)
            message_parts = [part.strip() for part in message_parts if part.strip()]
            
            messages = []
            for part in message_parts:
                if part:
                    messages.append({
                        'type': 'text',
                        'content': part
                    })
            return messages
        else:
            # Mensaje √∫nico como string
            return response_text

    async def _process_response_with_tools(self, combined_response: str, user_memory: LeadMemory, tool_contents: List[Dict[str, Any]]) -> Union[str, List[Dict[str, str]]]:
        """
        NUEVO: Procesa la respuesta combinada del agente + herramientas para generar multimedia.
        Convierte el contenido de herramientas en formato multimedia para el bot principal.
        """
        
        # Actualizar historial con solo la parte del agente (sin contenido de herramientas)
        agent_response = combined_response.split("\n\n## CONTENIDO DE HERRAMIENTAS ACTIVADAS:")[0]
        
        if user_memory.message_history is None:
            user_memory.message_history = []
        
        user_memory.message_history.append({
            'role': 'assistant',
            'content': agent_response,
            'timestamp': datetime.utcnow().isoformat()
        })
        
        # Limitar historial
        if len(user_memory.message_history) > 20:
            user_memory.message_history = user_memory.message_history[-20:]
        
        # Actualizar timestamps
        user_memory.last_interaction = datetime.utcnow()
        user_memory.updated_at = datetime.utcnow()
        
        # Construir respuesta multimedia con recursos
        multimedia_response = []
        
        # Agregar mensaje del agente
        multimedia_response.append({
            'type': 'text',
            'content': agent_response
        })
        
        # Procesar contenido de herramientas para agregar recursos
        for content in tool_contents:
            content_type = content.get('type', 'text')
            
            if content_type == 'multimedia':
                # Agregar recursos de herramientas multimedia
                resources = content.get('resources', [])
                for resource in resources:
                    if resource.get('type') == 'document' and resource.get('url'):
                        multimedia_response.append({
                            'type': 'document',
                            'url': resource['url'],
                            'caption': resource.get('caption', 'Documento')
                        })
                    elif resource.get('type') == 'video' and resource.get('url'):
                        multimedia_response.append({
                            'type': 'video',
                            'url': resource['url'],
                            'caption': resource.get('caption', 'Video')
                        })
                    elif resource.get('type') == 'link' and resource.get('url'):
                        # Los links se incluyen en el texto del agente
                        pass
        
        # Si hay recursos multimedia, retornar lista; sino, solo texto
        if len(multimedia_response) > 1:
            return multimedia_response
        else:
            return agent_response
    
    async def _activate_tools_based_on_intent(
        self, 
        intent_analysis: Dict, 
        user_memory, 
        course_info: Optional[Dict],
        user_message: str
    ) -> List[Dict[str, Any]]:
        """REDISE√ëADO: Wrapper para activar herramientas - retorna contenido en lugar de nombres"""
        try:
            # Verificar que agent_tools est√© disponible
            if not self.agent_tools:
                logger.warning("Agent tools no est√° disponible. Las herramientas no se activar√°n.")
                return []
                
            from core.agents.intelligent_sales_agent_tools import IntelligentSalesAgentTools
            tools_handler = IntelligentSalesAgentTools(self.agent_tools)
            
            user_id = user_memory.user_id
            tool_contents = await tools_handler._activate_tools_based_on_intent(
                intent_analysis, user_memory, course_info, user_message, user_id
            )
            
            return tool_contents
        except Exception as e:
            logger.error(f"Error en wrapper de herramientas: {e}")
            return []

    async def _activate_recommended_tools(self, tools: Dict[str, bool], user_memory: LeadMemory, course_info: Optional[Dict]):
        """Activa herramientas recomendadas por el an√°lisis de intenci√≥n"""
        try:
            course_id = user_memory.selected_course or (course_info.get('id') if course_info else None)
            if not course_id:
                return
            
            # Marcar que se han usado herramientas de ventas
            if any(tools.values()):
                user_memory.buying_signals = user_memory.buying_signals or []
                user_memory.buying_signals.append("tools_activated")
            
            # Log de herramientas activadas para m√©tricas
            activated_tools = [tool for tool, active in tools.items() if active]
            if activated_tools:
                logger.info(f"Herramientas activadas para usuario {user_memory.user_id}: {activated_tools}")
                
                # Guardar en historial que se activaron herramientas
                if user_memory.message_history is None:
                    user_memory.message_history = []
                
                user_memory.message_history.append({
                    'role': 'system',
                    'content': f"Herramientas activadas: {', '.join(activated_tools)}",
                    'timestamp': datetime.utcnow().isoformat()
                })
            
        except Exception as e:
            logger.error(f"Error activando herramientas: {e}") 