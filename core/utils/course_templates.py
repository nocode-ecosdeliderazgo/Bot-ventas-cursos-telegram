"""
Plantillas centralizadas para mostrar informaci√≥n de cursos - VERSI√ìN MIGRADA.
Todas las plantillas construyen la informaci√≥n din√°micamente desde la nueva estructura de base de datos.
Compatibles con ai_courses, ai_course_sessions, ai_session_practices, ai_session_deliverables.
"""

class CourseTemplates:
    """Plantillas para mostrar informaci√≥n de cursos de manera consistente - VERSI√ìN MIGRADA."""
    
    @staticmethod
    def format_course_info(course_details: dict) -> str:
        """
        Formatea la informaci√≥n completa del curso para mostrar al usuario.
        MIGRADO: Usa campos de ai_courses con conversi√≥n robusta de tipos
        """
        name = course_details.get('name', 'Dato no encontrado')
        description = course_details.get('short_description', 'Dato no encontrado')
        
        # Cambios en nueva estructura: total_duration_min en lugar de total_duration
        # CORREGIDO: Manejo robusto de tipos string/int
        duration_min_raw = course_details.get('total_duration_min', 0)
        try:
            # Convertir a int sin importar si es string o int
            duration_min = int(duration_min_raw) if duration_min_raw else 0
            if duration_min > 0:
                hours = duration_min // 60
                minutes = duration_min % 60
                duration = f"{hours}h {minutes}m" if hours > 0 else f"{minutes}m"
            else:
                duration = "dato no encontrado"
        except (ValueError, TypeError):
            duration = "dato no encontrado"
        
        level = course_details.get('level', 'dato no encontrado')
        
        # Cambios en nueva estructura: price en lugar de price_usd
        # CORREGIDO: Manejo robusto de tipos string/int para price
        price_raw = course_details.get('price', 0)
        try:
            # Convertir a float sin importar si es string o number
            price = float(price_raw) if price_raw else 0
            currency = course_details.get('currency', 'USD')
            # Formatear precio sin decimales innecesarios
            price_formatted = f"{price:.0f}" if price == int(price) else f"{price:.2f}"
            price_str = f"{price_formatted} {currency}" if price > 0 else "dato no encontrado"
        except (ValueError, TypeError):
            price_str = "dato no encontrado"
        
        # Extraer sesiones de la nueva estructura
        sessions_text = ""
        sessions = course_details.get('sessions', [])
        if sessions and isinstance(sessions, list):
            sessions_text = "\n\nüìö **Sesiones del curso:**\n"
            for i, session in enumerate(sessions[:5], 1):  # Mostrar m√°ximo 5 sesiones
                session_title = session.get('title', f'Sesi√≥n {i}')
                sessions_text += f"{i}. {session_title}\n"
        
        return f"""üéì **{name}**

{description}

‚è±Ô∏è **Duraci√≥n:** {duration}
üìä **Nivel:** {level}
üí∞ **Inversi√≥n:** ${price_str}
{sessions_text}

¬øQu√© te gustar√≠a saber m√°s sobre este curso?"""

    @staticmethod
    def format_course_summary(course_details: dict) -> str:
        """
        Formatea un resumen b√°sico del curso.
        MIGRADO: Usa campos de ai_courses con conversi√≥n robusta de tipos
        """
        name = course_details.get('name', 'Dato no encontrado')
        description = course_details.get('short_description', 'Dato no encontrado')
        
        # Cambios en nueva estructura - CORREGIDO: Manejo robusto de tipos
        price_raw = course_details.get('price', 0)
        try:
            price = float(price_raw) if price_raw else 0
            currency = course_details.get('currency', 'USD')
            # Formatear precio sin decimales innecesarios
            price_formatted = f"{price:.0f}" if price == int(price) else f"{price:.2f}"
            price_str = f"{price_formatted} {currency}" if price > 0 else "dato no encontrado"
        except (ValueError, TypeError):
            price_str = "dato no encontrado"
        
        return f"""üéØ **{name}**

{description}

üí∞ **Inversi√≥n:** ${price_str}"""

    @staticmethod
    def format_course_welcome(course_details: dict, user_name: str) -> str:
        """
        Formatea el mensaje de bienvenida personalizado con informaci√≥n del curso.
        MIGRADO: Usa campos de ai_courses
        """
        name = course_details.get('name', 'Dato no encontrado')
        description = course_details.get('short_description', 'Dato no encontrado')
        
        return f"""¬°Hola {user_name}! üòä 

Soy Brenda de **Aprenda y Aplique IA** ü§ñ‚ú®

Me da much√≠simo gusto que te interese nuestro curso:

üéì **{name}**

{description}

Te voy a compartir el programa completo del curso y algunos materiales para que veas todo lo que vas a aprender üìö"""

    @staticmethod
    def format_course_details_with_benefits(course_details: dict) -> str:
        """
        Formatea informaci√≥n detallada del curso con beneficios.
        MIGRADO: Usa campos de ai_courses y ai_subthemes con conversi√≥n robusta de tipos
        """
        name = course_details.get('name', 'Dato no encontrado')
        description = course_details.get('short_description', 'Dato no encontrado')
        
        # Cambios en nueva estructura - CORREGIDO: Manejo robusto de tipos
        duration_min_raw = course_details.get('total_duration_min', 0)
        try:
            duration_min = int(duration_min_raw) if duration_min_raw else 0
            if duration_min > 0:
                hours = duration_min // 60
                minutes = duration_min % 60
                duration = f"{hours}h {minutes}m" if hours > 0 else f"{minutes}m"
            else:
                duration = "dato no encontrado"
        except (ValueError, TypeError):
            duration = "dato no encontrado"
        
        level = course_details.get('level', 'dato no encontrado')
        
        price_raw = course_details.get('price', 0)
        try:
            price = float(price_raw) if price_raw else 0
            currency = course_details.get('currency', 'USD')
            # Formatear precio sin decimales innecesarios
            price_formatted = f"{price:.0f}" if price == int(price) else f"{price:.2f}"
            price_str = f"{price_formatted} {currency}" if price > 0 else "dato no encontrado"
        except (ValueError, TypeError):
            price_str = "dato no encontrado"
        
        # Informaci√≥n del subtema (nueva funcionalidad)
        subtheme_text = ""
        if course_details.get('subtheme_name'):
            subtheme_text = f"üéØ **Categor√≠a:** {course_details['subtheme_name']}\n"
        
        # Conteo de sesiones (nueva funcionalidad)
        session_count_raw = course_details.get('session_count', 0)
        try:
            session_count = int(session_count_raw) if session_count_raw else 0
            session_text = f"üìö **Sesiones:** {session_count}\n" if session_count > 0 else ""
        except (ValueError, TypeError):
            session_text = ""
        
        return f"""üéì **{name}**

{description}

{subtheme_text}{session_text}‚è±Ô∏è **Duraci√≥n:** {duration}
üìä **Nivel:** {level}
üí∞ **Inversi√≥n:** ${price_str}

‚ú® **¬øPor qu√© este curso te va a cambiar la vida?**
‚Ä¢ Aprender√°s habilidades que est√°n transformando el mundo laboral
‚Ä¢ Automatizar√°s tareas repetitivas y ahorrar√°s horas de trabajo
‚Ä¢ Te convertir√°s en un profesional m√°s competitivo y valioso
‚Ä¢ Tendr√°s acceso a herramientas que la mayor√≠a no sabe usar

¬øTe gustar√≠a saber c√≥mo este curso puede transformar espec√≠ficamente tu carrera?"""

    @staticmethod
    def format_course_modules_detailed(course_details: dict) -> str:
        """
        Formatea las sesiones del curso de manera detallada.
        MIGRADO: Usa ai_course_sessions en lugar de course_modules
        """
        name = course_details.get('name', 'Dato no encontrado')
        sessions = course_details.get('sessions', [])
        
        sessions_text = "üìö **Sesiones del curso:**\n\n"
        
        if sessions and isinstance(sessions, list):
            for i, session in enumerate(sessions, 1):
                session_title = session.get('title', f'Sesi√≥n {i}')
                session_objective = session.get('objective', 'Objetivo no especificado')
                session_duration_raw = session.get('duration_minutes', 0)
                
                # Manejo robusto de duration_minutes
                try:
                    session_duration = int(session_duration_raw) if session_duration_raw else 0
                    duration_text = f" ({session_duration} min)" if session_duration > 0 else ""
                except (ValueError, TypeError):
                    duration_text = ""
                
                sessions_text += f"**{i}. {session_title}**{duration_text}\n"
                sessions_text += f"   {session_objective}\n\n"
        else:
            sessions_text = "dato no encontrado"
        
        return f"""üéì **{name}**

{sessions_text}

¬øCu√°l de estas sesiones te emociona m√°s? üöÄ"""

    @staticmethod
    def format_course_pricing(course_details: dict) -> str:
        """
        Formatea informaci√≥n de precios.
        MIGRADO: Campos de descuento eliminados en nueva estructura con conversi√≥n robusta
        """
        name = course_details.get('name', 'Dato no encontrado')
        
        # Manejo robusto del precio
        price_raw = course_details.get('price', 0)
        try:
            price = float(price_raw) if price_raw else 0
            currency = course_details.get('currency', 'USD')
            price_formatted = f"{price:.0f}" if price == int(price) else f"{price:.2f}"
            price_str = f"{price_formatted} {currency}" if price > 0 else "dato no encontrado"
        except (ValueError, TypeError):
            price_str = "dato no encontrado"
        
        # Informaci√≥n adicional de la nueva estructura con manejo robusto
        session_count_raw = course_details.get('session_count', 0)
        try:
            session_count = int(session_count_raw) if session_count_raw else 0
            session_text = f"‚Ä¢ {session_count} sesiones completas\n" if session_count > 0 else ""
        except (ValueError, TypeError):
            session_text = ""
        
        duration_min_raw = course_details.get('total_duration_min', 0)
        try:
            duration_min = int(duration_min_raw) if duration_min_raw else 0
            duration_text = f"‚Ä¢ {duration_min} minutos de contenido\n" if duration_min > 0 else ""
        except (ValueError, TypeError):
            duration_text = ""
        
        return f"""üéì **{name}**

üí∞ **Inversi√≥n:** ${price_str}

‚ú® **¬øQu√© incluye tu inversi√≥n?**
{session_text}{duration_text}‚Ä¢ Acceso completo al curso por tiempo ilimitado
‚Ä¢ Certificado al completar el programa
‚Ä¢ Soporte directo con instructores
‚Ä¢ Comunidad privada de estudiantes
‚Ä¢ Actualizaciones gratuitas del contenido

¬øTe gustar√≠a conocer las opciones de pago disponibles?"""

    @staticmethod
    def format_session_detail(session_details: dict) -> str:
        """
        Formatea informaci√≥n detallada de una sesi√≥n espec√≠fica.
        NUEVO: Funcionalidad agregada para nueva estructura con manejo robusto
        """
        title = session_details.get('title', 'Sesi√≥n sin t√≠tulo')
        objective = session_details.get('objective', 'Objetivo no especificado')
        duration_minutes_raw = session_details.get('duration_minutes', 0)
        modality = session_details.get('modality', 'online')
        
        # Manejo robusto de duration_minutes
        try:
            duration_minutes = int(duration_minutes_raw) if duration_minutes_raw else 0
            duration_text = f"{duration_minutes} minutos" if duration_minutes > 0 else "Duraci√≥n no especificada"
        except (ValueError, TypeError):
            duration_text = "Duraci√≥n no especificada"
        
        return f"""üìñ **{title}**

üéØ **Objetivo:** {objective}

‚è±Ô∏è **Duraci√≥n:** {duration_text}
üì± **Modalidad:** {modality}

¬øTe gustar√≠a ver las pr√°cticas y entregables de esta sesi√≥n?"""

    @staticmethod
    def format_subtheme_info(subtheme_details: dict) -> str:
        """
        Formatea informaci√≥n de un subtema.
        NUEVO: Funcionalidad agregada para nueva estructura
        """
        name = subtheme_details.get('name', 'Subtema sin nombre')
        description = subtheme_details.get('description', 'Descripci√≥n no disponible')
        
        return f"""üéØ **Categor√≠a: {name}**

{description}

¬øTe gustar√≠a ver todos los cursos de esta categor√≠a?"""

    @staticmethod
    def format_error_message(course_id: str) -> str:
        """
        Formatea mensaje de error cuando no se puede obtener informaci√≥n del curso.
        MANTENIDO: Sin cambios
        """
        return f"""‚ùå **Error al obtener informaci√≥n del curso**

Lo siento, no pude obtener los detalles del curso desde la base de datos.
ID del curso: {course_id}

Por favor, intenta nuevamente o contacta a nuestro equipo de soporte.

¬øTe gustar√≠a que te ayude con algo m√°s?"""

    @staticmethod
    def _extract_sessions_from_data(course_data: dict) -> list:
        """
        Extrae sesiones de los datos del curso.
        MIGRADO: Usa sessions en lugar de modules
        """
        sessions = course_data.get('sessions', [])
        if not sessions:
            return []
        
        session_list = []
        for session in sessions:
            if isinstance(session, dict):
                session_title = session.get('title', 'Sesi√≥n sin t√≠tulo')
                session_objective = session.get('objective', '')
                if session_title and len(session_title) > 5:
                    session_list.append({
                        'title': session_title,
                        'objective': session_objective
                    })
        
        return session_list[:10]  # M√°ximo 10 sesiones